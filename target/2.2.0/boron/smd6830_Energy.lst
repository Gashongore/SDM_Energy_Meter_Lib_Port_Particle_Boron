
/Users/gashongore/Desktop/SDM6830/smd6830_Energy/target/2.2.0/boron/smd6830_Energy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001fa4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5fc0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e4f4  000d5fc4  0001e4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000290  2003e560  2003e560  0002e560  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6030  000d6030  00026030  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6058  000d6058  00026058  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011b1ab  00000000  00000000  0002605c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012d8c  00000000  00000000  00141207  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000218a8  00000000  00000000  00153f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002190  00000000  00000000  0017583b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006220  00000000  00000000  001779cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035905  00000000  00000000  0017dbeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f0d8  00000000  00000000  001b34f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105c13  00000000  00000000  001e25c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005ae0  00000000  00000000  002e81dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fe13 	bl	d5c58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fe1b 	bl	d5c74 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e4f4 	.word	0x2003e4f4
   d4048:	000d5fc4 	.word	0x000d5fc4
   d404c:	2003e560 	.word	0x2003e560
   d4050:	2003e560 	.word	0x2003e560
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f865 	bl	d512c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5f94 	.word	0x000d5f94
   d407c:	000d5fb8 	.word	0x000d5fb8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b926 	b.w	d42d0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f931 	bl	d42ec <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b805 	b.w	d509c <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 bb59 	b.w	d4748 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bb5f 	b.w	d4758 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN3SDMD1Ev>:
  this->_dere_pin = dere_pin;
  this->_config = config;
}

SDM::~SDM() {
}
   d40aa:	4770      	bx	lr

000d40ac <_ZN3SDMD0Ev>:
SDM::~SDM() {
   d40ac:	b510      	push	{r4, lr}
}
   d40ae:	2120      	movs	r1, #32
SDM::~SDM() {
   d40b0:	4604      	mov	r4, r0
}
   d40b2:	f001 f913 	bl	d52dc <_ZdlPvj>
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}
	...

000d40bc <_ZN3SDMC1Elii>:
SDM::SDM(long baud, int dere_pin, int config) /*: Serial1(serial) */{
   d40bc:	b530      	push	{r4, r5, lr}
   d40be:	4d07      	ldr	r5, [pc, #28]	; (d40dc <_ZN3SDMC1Elii+0x20>)
   d40c0:	6005      	str	r5, [r0, #0]
   d40c2:	f44f 0548 	mov.w	r5, #13107200	; 0xc80000
   d40c6:	6105      	str	r5, [r0, #16]
   d40c8:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
   d40cc:	8285      	strh	r5, [r0, #20]
   d40ce:	2500      	movs	r5, #0
   d40d0:	e9c0 5506 	strd	r5, r5, [r0, #24]
  this->_dere_pin = dere_pin;
   d40d4:	e9c0 1202 	strd	r1, r2, [r0, #8]
  this->_config = config;
   d40d8:	6043      	str	r3, [r0, #4]
}
   d40da:	bd30      	pop	{r4, r5, pc}
   d40dc:	000d5dc4 	.word	0x000d5dc4

000d40e0 <_ZN3SDM12calculateCRCEPhh>:

uint16_t SDM::getMsTimeout() {
  return (mstimeout);
}

uint16_t SDM::calculateCRC(uint8_t *array, uint8_t len) {
   d40e0:	b530      	push	{r4, r5, lr}
   d40e2:	440a      	add	r2, r1
  uint16_t _crc, _flag;
  _crc = 0xFFFF;
   d40e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    _crc ^= (uint16_t)array[i];
    for (uint8_t j = 8; j; j--) {
      _flag = _crc & 0x0001;
      _crc >>= 1;
      if (_flag)
        _crc ^= 0xA001;
   d40e8:	f24a 0401 	movw	r4, #40961	; 0xa001
  for (uint8_t i = 0; i < len; i++) {
   d40ec:	4291      	cmp	r1, r2
   d40ee:	d00e      	beq.n	d410e <_ZN3SDM12calculateCRCEPhh+0x2e>
    _crc ^= (uint16_t)array[i];
   d40f0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d40f4:	4058      	eors	r0, r3
   d40f6:	2308      	movs	r3, #8
      _flag = _crc & 0x0001;
   d40f8:	f000 0501 	and.w	r5, r0, #1
      _crc >>= 1;
   d40fc:	0840      	lsrs	r0, r0, #1
      if (_flag)
   d40fe:	b10d      	cbz	r5, d4104 <_ZN3SDM12calculateCRCEPhh+0x24>
        _crc ^= 0xA001;
   d4100:	4060      	eors	r0, r4
   d4102:	b280      	uxth	r0, r0
    for (uint8_t j = 8; j; j--) {
   d4104:	3b01      	subs	r3, #1
   d4106:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d410a:	d1f5      	bne.n	d40f8 <_ZN3SDM12calculateCRCEPhh+0x18>
   d410c:	e7ee      	b.n	d40ec <_ZN3SDM12calculateCRCEPhh+0xc>
    }
  }
  return _crc;
}
   d410e:	bd30      	pop	{r4, r5, pc}

000d4110 <_ZN3SDM9sdm_flushEm>:

void SDM::sdm_flush(unsigned long _flushtime) {
   d4110:	b510      	push	{r4, lr}
   d4112:	460c      	mov	r4, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4114:	f000 f98c 	bl	d4430 <HAL_Timer_Get_Milli_Seconds>
  unsigned long flushtime = millis() + _flushtime;
   d4118:	4404      	add	r4, r0
  while (Serial1.available() || flushtime >= millis()) {
   d411a:	f000 fef3 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d411e:	6803      	ldr	r3, [r0, #0]
   d4120:	691b      	ldr	r3, [r3, #16]
   d4122:	4798      	blx	r3
   d4124:	b170      	cbz	r0, d4144 <_ZN3SDM9sdm_flushEm+0x34>
    if (Serial1.available())                                                     //read serial if any old data is available
   d4126:	f000 feed 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d412a:	6803      	ldr	r3, [r0, #0]
   d412c:	691b      	ldr	r3, [r3, #16]
   d412e:	4798      	blx	r3
   d4130:	b120      	cbz	r0, d413c <_ZN3SDM9sdm_flushEm+0x2c>
      Serial1.read();
   d4132:	f000 fee7 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d4136:	6803      	ldr	r3, [r0, #0]
   d4138:	695b      	ldr	r3, [r3, #20]
   d413a:	4798      	blx	r3
    delay(1);
   d413c:	2001      	movs	r0, #1
   d413e:	f000 fb23 	bl	d4788 <delay>
  while (Serial1.available() || flushtime >= millis()) {
   d4142:	e7ea      	b.n	d411a <_ZN3SDM9sdm_flushEm+0xa>
   d4144:	f000 f974 	bl	d4430 <HAL_Timer_Get_Milli_Seconds>
   d4148:	4284      	cmp	r4, r0
   d414a:	d2ec      	bcs.n	d4126 <_ZN3SDM9sdm_flushEm+0x16>
  }
}
   d414c:	bd10      	pop	{r4, pc}

000d414e <_ZN3SDM7dereSetEb>:

void SDM::dereSet(bool _state) {
  if (_dere_pin != NOT_A_PIN)
   d414e:	68c0      	ldr	r0, [r0, #12]
   d4150:	2802      	cmp	r0, #2
   d4152:	d002      	beq.n	d415a <_ZN3SDM7dereSetEb+0xc>
    digitalWrite(_dere_pin, _state);                                            //receive from SDM -> DE Disable, /RE Enable (for control MAX485)
   d4154:	b280      	uxth	r0, r0
   d4156:	f001 b86a 	b.w	d522e <digitalWrite>
}
   d415a:	4770      	bx	lr

000d415c <_ZN3SDM5beginEv>:
void SDM::begin(void) {
   d415c:	b510      	push	{r4, lr}
   d415e:	4604      	mov	r4, r0
  Serial1.begin(_baud, _config);
   d4160:	f000 fed0 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d4164:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   d4168:	f000 fec8 	bl	d4efc <_ZN11USARTSerial5beginEmm>
  if (_dere_pin != NOT_A_PIN) {
   d416c:	68e0      	ldr	r0, [r4, #12]
   d416e:	2802      	cmp	r0, #2
   d4170:	d003      	beq.n	d417a <_ZN3SDM5beginEv+0x1e>
    pinMode(_dere_pin, OUTPUT);                                                 //set output pin mode for DE/RE pin when used (for control MAX485)
   d4172:	2101      	movs	r1, #1
   d4174:	b280      	uxth	r0, r0
   d4176:	f001 f849 	bl	d520c <pinMode>
  dereSet(LOW);                                                                 //set init state to receive from SDM -> DE Disable, /RE Enable (for control MAX485)
   d417a:	4620      	mov	r0, r4
   d417c:	2100      	movs	r1, #0
}
   d417e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dereSet(LOW);                                                                 //set init state to receive from SDM -> DE Disable, /RE Enable (for control MAX485)
   d4182:	f7ff bfe4 	b.w	d414e <_ZN3SDM7dereSetEb>
	...

000d4188 <_ZN3SDM7readValEth>:
float SDM::readVal(uint16_t reg, uint8_t node) {
   d4188:	b5f0      	push	{r4, r5, r6, r7, lr}
   d418a:	b085      	sub	sp, #20
  uint8_t sdmarr[FRAMESIZE] = {node, SDM_B_02, 0, 0, SDM_B_05, SDM_B_06, 0, 0, 0};
   d418c:	2304      	movs	r3, #4
  sdmarr[2] = highByte(reg);
   d418e:	ba49      	rev16	r1, r1
  uint8_t sdmarr[FRAMESIZE] = {node, SDM_B_02, 0, 0, SDM_B_05, SDM_B_06, 0, 0, 0};
   d4190:	2600      	movs	r6, #0
   d4192:	f88d 3005 	strb.w	r3, [sp, #5]
   d4196:	2702      	movs	r7, #2
  float res = NAN;
   d4198:	4b4c      	ldr	r3, [pc, #304]	; (d42cc <_ZN3SDM7readValEth+0x144>)
  uint8_t sdmarr[FRAMESIZE] = {node, SDM_B_02, 0, 0, SDM_B_05, SDM_B_06, 0, 0, 0};
   d419a:	f88d 2004 	strb.w	r2, [sp, #4]
  sdmarr[2] = highByte(reg);
   d419e:	f8ad 1006 	strh.w	r1, [sp, #6]
float SDM::readVal(uint16_t reg, uint8_t node) {
   d41a2:	4615      	mov	r5, r2
  temp = calculateCRC(sdmarr, FRAMESIZE - 3);                                   //calculate out crc only from first 6 bytes
   d41a4:	a901      	add	r1, sp, #4
   d41a6:	2206      	movs	r2, #6
  float res = NAN;
   d41a8:	9300      	str	r3, [sp, #0]
float SDM::readVal(uint16_t reg, uint8_t node) {
   d41aa:	4604      	mov	r4, r0
  uint8_t sdmarr[FRAMESIZE] = {node, SDM_B_02, 0, 0, SDM_B_05, SDM_B_06, 0, 0, 0};
   d41ac:	9602      	str	r6, [sp, #8]
   d41ae:	f88d 600c 	strb.w	r6, [sp, #12]
   d41b2:	f88d 7009 	strb.w	r7, [sp, #9]
  temp = calculateCRC(sdmarr, FRAMESIZE - 3);                                   //calculate out crc only from first 6 bytes
   d41b6:	f7ff ff93 	bl	d40e0 <_ZN3SDM12calculateCRCEPhh>
  sdm_flush();                                                                      //read serial if any old data is available
   d41ba:	4631      	mov	r1, r6
  sdmarr[6] = lowByte(temp);
   d41bc:	f8ad 000a 	strh.w	r0, [sp, #10]
  sdm_flush();                                                                      //read serial if any old data is available
   d41c0:	4620      	mov	r0, r4
   d41c2:	f7ff ffa5 	bl	d4110 <_ZN3SDM9sdm_flushEm>
  dereSet(HIGH);                                                                //transmit to SDM  -> DE Enable, /RE Disable (for control MAX485)
   d41c6:	2101      	movs	r1, #1
   d41c8:	4620      	mov	r0, r4
   d41ca:	f7ff ffc0 	bl	d414e <_ZN3SDM7dereSetEb>
  delay(2);                                                                     //fix for issue (nan reading) by sjfaustino: https://github.com/reaper7/SDM_Energy_Meter/issues/7#issuecomment-272111524
   d41ce:	4638      	mov	r0, r7
   d41d0:	f000 fada 	bl	d4788 <delay>
  Serial1.write(sdmarr, FRAMESIZE - 1);                                          //send 8 bytes
   d41d4:	f000 fe96 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d41d8:	6803      	ldr	r3, [r0, #0]
   d41da:	2208      	movs	r2, #8
   d41dc:	a901      	add	r1, sp, #4
   d41de:	68db      	ldr	r3, [r3, #12]
   d41e0:	4798      	blx	r3
  Serial1.flush();                                                               //clear out tx buffer
   d41e2:	f000 fe8f 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d41e6:	6803      	ldr	r3, [r0, #0]
   d41e8:	69db      	ldr	r3, [r3, #28]
   d41ea:	4798      	blx	r3
  dereSet(LOW);                                                                 //receive from SDM -> DE Disable, /RE Enable (for control MAX485)
   d41ec:	4631      	mov	r1, r6
   d41ee:	4620      	mov	r0, r4
   d41f0:	f7ff ffad 	bl	d414e <_ZN3SDM7dereSetEb>
   d41f4:	f000 f91c 	bl	d4430 <HAL_Timer_Get_Milli_Seconds>
  resptime = millis() + msturnarount;
   d41f8:	8a63      	ldrh	r3, [r4, #18]
   d41fa:	181e      	adds	r6, r3, r0
  while (Serial1.available() < FRAMESIZE) {
   d41fc:	f000 fe82 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d4200:	6803      	ldr	r3, [r0, #0]
   d4202:	691b      	ldr	r3, [r3, #16]
   d4204:	4798      	blx	r3
   d4206:	2808      	cmp	r0, #8
   d4208:	dc57      	bgt.n	d42ba <_ZN3SDM7readValEth+0x132>
   d420a:	f000 f911 	bl	d4430 <HAL_Timer_Get_Milli_Seconds>
    if (resptime < millis()) {
   d420e:	42b0      	cmp	r0, r6
   d4210:	d847      	bhi.n	d42a2 <_ZN3SDM7readValEth+0x11a>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d4212:	f000 f8f5 	bl	d4400 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   d4216:	e7f1      	b.n	d41fc <_ZN3SDM7readValEth+0x74>
   d4218:	af01      	add	r7, sp, #4
      for(int n=0; n<FRAMESIZE; n++) {
   d421a:	2600      	movs	r6, #0
        sdmarr[n] = Serial1.read();
   d421c:	f000 fe72 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d4220:	6803      	ldr	r3, [r0, #0]
   d4222:	695b      	ldr	r3, [r3, #20]
   d4224:	4798      	blx	r3
      for(int n=0; n<FRAMESIZE; n++) {
   d4226:	3601      	adds	r6, #1
   d4228:	2e09      	cmp	r6, #9
        sdmarr[n] = Serial1.read();
   d422a:	f807 0b01 	strb.w	r0, [r7], #1
      for(int n=0; n<FRAMESIZE; n++) {
   d422e:	d1f5      	bne.n	d421c <_ZN3SDM7readValEth+0x94>
      if (sdmarr[0] == node && sdmarr[1] == SDM_B_02 && sdmarr[2] == SDM_REPLY_BYTE_COUNT) {
   d4230:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4234:	42ab      	cmp	r3, r5
   d4236:	d136      	bne.n	d42a6 <_ZN3SDM7readValEth+0x11e>
   d4238:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d423c:	2b04      	cmp	r3, #4
   d423e:	d132      	bne.n	d42a6 <_ZN3SDM7readValEth+0x11e>
   d4240:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d4244:	2b04      	cmp	r3, #4
   d4246:	d12e      	bne.n	d42a6 <_ZN3SDM7readValEth+0x11e>
        if ((calculateCRC(sdmarr, FRAMESIZE - 2)) == ((sdmarr[8] << 8) | sdmarr[7])) {  //calculate crc from first 7 bytes and compare with received crc (bytes 7 & 8)
   d4248:	2207      	movs	r2, #7
   d424a:	a901      	add	r1, sp, #4
   d424c:	4620      	mov	r0, r4
   d424e:	f7ff ff47 	bl	d40e0 <_ZN3SDM12calculateCRCEPhh>
   d4252:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   d4256:	4283      	cmp	r3, r0
   d4258:	d127      	bne.n	d42aa <_ZN3SDM7readValEth+0x122>
          ((uint8_t*)&res)[3]= sdmarr[3];
   d425a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d425e:	f88d 3003 	strb.w	r3, [sp, #3]
          ((uint8_t*)&res)[2]= sdmarr[4];
   d4262:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d4266:	f88d 3002 	strb.w	r3, [sp, #2]
          ((uint8_t*)&res)[1]= sdmarr[5];
   d426a:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d426e:	f88d 3001 	strb.w	r3, [sp, #1]
          ((uint8_t*)&res)[0]= sdmarr[6];
   d4272:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d4276:	f88d 3000 	strb.w	r3, [sp]
   d427a:	2500      	movs	r5, #0
  sdm_flush(mstimeout);                                                             //read serial if any old data is available and wait for RESPONSE_TIMEOUT (in ms)
   d427c:	8aa1      	ldrh	r1, [r4, #20]
   d427e:	4620      	mov	r0, r4
   d4280:	f7ff ff46 	bl	d4110 <_ZN3SDM9sdm_flushEm>
  if (Serial1.available())                                                       //if serial rx buffer (after RESPONSE_TIMEOUT) still contains data then something spam rs485, check node(s) or increase RESPONSE_TIMEOUT
   d4284:	f000 fe3e 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d4288:	6803      	ldr	r3, [r0, #0]
   d428a:	691b      	ldr	r3, [r3, #16]
   d428c:	4798      	blx	r3
   d428e:	b970      	cbnz	r0, d42ae <_ZN3SDM7readValEth+0x126>
  if (readErr != SDM_ERR_NO_ERROR) {                                            //if error then copy temp error value to global val and increment global error counter
   d4290:	b17d      	cbz	r5, d42b2 <_ZN3SDM7readValEth+0x12a>
    readingerrcount++; 
   d4292:	69a3      	ldr	r3, [r4, #24]
    readingerrcode = readErr;
   d4294:	8225      	strh	r5, [r4, #16]
    readingerrcount++; 
   d4296:	3301      	adds	r3, #1
   d4298:	61a3      	str	r3, [r4, #24]
  return (res);
   d429a:	ed9d 0a00 	vldr	s0, [sp]
}
   d429e:	b005      	add	sp, #20
   d42a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      readErr = SDM_ERR_TIMEOUT;                                                //err debug (4)
   d42a2:	2504      	movs	r5, #4
   d42a4:	e7ea      	b.n	d427c <_ZN3SDM7readValEth+0xf4>
        readErr = SDM_ERR_WRONG_BYTES;                                          //err debug (2)
   d42a6:	2502      	movs	r5, #2
   d42a8:	e7e8      	b.n	d427c <_ZN3SDM7readValEth+0xf4>
          readErr = SDM_ERR_CRC_ERROR;                                          //err debug (1)
   d42aa:	2501      	movs	r5, #1
   d42ac:	e7e6      	b.n	d427c <_ZN3SDM7readValEth+0xf4>
    readErr = SDM_ERR_TIMEOUT;                                                  //err debug (4) but returned value may be correct
   d42ae:	2504      	movs	r5, #4
   d42b0:	e7ef      	b.n	d4292 <_ZN3SDM7readValEth+0x10a>
    ++readingsuccesscount;
   d42b2:	69e3      	ldr	r3, [r4, #28]
   d42b4:	3301      	adds	r3, #1
   d42b6:	61e3      	str	r3, [r4, #28]
   d42b8:	e7ef      	b.n	d429a <_ZN3SDM7readValEth+0x112>
    if (Serial1.available() >= FRAMESIZE) {
   d42ba:	f000 fe23 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d42be:	6803      	ldr	r3, [r0, #0]
   d42c0:	691b      	ldr	r3, [r3, #16]
   d42c2:	4798      	blx	r3
   d42c4:	2808      	cmp	r0, #8
   d42c6:	dca7      	bgt.n	d4218 <_ZN3SDM7readValEth+0x90>
      readErr = SDM_ERR_NOT_ENOUGHT_BYTES;                                      //err debug (3)
   d42c8:	2503      	movs	r5, #3
   d42ca:	e7d7      	b.n	d427c <_ZN3SDM7readValEth+0xf4>
   d42cc:	7fc00000 	.word	0x7fc00000

000d42d0 <setup>:

#include <SDM.h>                                                                //import SDM library
                                                                      //for AVR
SDM sdm(SDM_UART_BAUD, NOT_A_PIN,SDM_UART_CONFIG);                                              //config SDM on Serial1 (if available!)                                                                         //for SWSERIAL

void setup() {
   d42d0:	b508      	push	{r3, lr}
  Serial.begin(9600);   /* this is another serial, avoid using the same serial     */  //initialize other serial, 
   d42d2:	f000 fe9b 	bl	d500c <_Z16_fetch_usbserialv>
   d42d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42da:	f000 fe8b 	bl	d4ff4 <_ZN9USBSerial5beginEl>
  sdm.begin();                                                                  //initialize SDM communication
}
   d42de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sdm.begin();                                                                  //initialize SDM communication
   d42e2:	4801      	ldr	r0, [pc, #4]	; (d42e8 <setup+0x18>)
   d42e4:	f7ff bf3a 	b.w	d415c <_ZN3SDM5beginEv>
   d42e8:	2003e560 	.word	0x2003e560

000d42ec <loop>:

void loop() {
   d42ec:	b530      	push	{r4, r5, lr}
   d42ee:	b085      	sub	sp, #20
  char bufout[10];
  sprintf(bufout, "%c[1;0H", 27);
   d42f0:	221b      	movs	r2, #27
   d42f2:	4934      	ldr	r1, [pc, #208]	; (d43c4 <loop+0xd8>)
  Serial.print(bufout);

  Serial.print("Voltage:   ");
  Serial.print(sdm.readVal(SDM_PHASE_1_VOLTAGE), 2);                            //display voltage
   d42f4:	4c34      	ldr	r4, [pc, #208]	; (d43c8 <loop+0xdc>)
  sprintf(bufout, "%c[1;0H", 27);
   d42f6:	a801      	add	r0, sp, #4
   d42f8:	f000 fa36 	bl	d4768 <sprintf>
  Serial.print(bufout);
   d42fc:	f000 fe86 	bl	d500c <_Z16_fetch_usbserialv>
   d4300:	a901      	add	r1, sp, #4
   d4302:	f000 fc67 	bl	d4bd4 <_ZN5Print5printEPKc>
  Serial.print("Voltage:   ");
   d4306:	f000 fe81 	bl	d500c <_Z16_fetch_usbserialv>
   d430a:	4930      	ldr	r1, [pc, #192]	; (d43cc <loop+0xe0>)
   d430c:	f000 fc62 	bl	d4bd4 <_ZN5Print5printEPKc>
  Serial.print(sdm.readVal(SDM_PHASE_1_VOLTAGE), 2);                            //display voltage
   d4310:	f000 fe7c 	bl	d500c <_Z16_fetch_usbserialv>
   d4314:	2201      	movs	r2, #1
   d4316:	4605      	mov	r5, r0
   d4318:	2100      	movs	r1, #0
   d431a:	4620      	mov	r0, r4
   d431c:	f7ff ff34 	bl	d4188 <_ZN3SDM7readValEth>
   d4320:	2102      	movs	r1, #2
   d4322:	4628      	mov	r0, r5
   d4324:	f000 fd5a 	bl	d4ddc <_ZN5Print5printEfi>
  Serial.println("V");
   d4328:	f000 fe70 	bl	d500c <_Z16_fetch_usbserialv>
   d432c:	4928      	ldr	r1, [pc, #160]	; (d43d0 <loop+0xe4>)
   d432e:	f000 fc64 	bl	d4bfa <_ZN5Print7printlnEPKc>

  Serial.print("Current:   ");
   d4332:	f000 fe6b 	bl	d500c <_Z16_fetch_usbserialv>
   d4336:	4927      	ldr	r1, [pc, #156]	; (d43d4 <loop+0xe8>)
   d4338:	f000 fc4c 	bl	d4bd4 <_ZN5Print5printEPKc>
  Serial.print(sdm.readVal(SDM_PHASE_1_CURRENT), 2);                            //display current
   d433c:	f000 fe66 	bl	d500c <_Z16_fetch_usbserialv>
   d4340:	2201      	movs	r2, #1
   d4342:	4605      	mov	r5, r0
   d4344:	2106      	movs	r1, #6
   d4346:	4620      	mov	r0, r4
   d4348:	f7ff ff1e 	bl	d4188 <_ZN3SDM7readValEth>
   d434c:	2102      	movs	r1, #2
   d434e:	4628      	mov	r0, r5
   d4350:	f000 fd44 	bl	d4ddc <_ZN5Print5printEfi>
  Serial.println("A");
   d4354:	f000 fe5a 	bl	d500c <_Z16_fetch_usbserialv>
   d4358:	491f      	ldr	r1, [pc, #124]	; (d43d8 <loop+0xec>)
   d435a:	f000 fc4e 	bl	d4bfa <_ZN5Print7printlnEPKc>

  Serial.print("Power:     ");
   d435e:	f000 fe55 	bl	d500c <_Z16_fetch_usbserialv>
   d4362:	491e      	ldr	r1, [pc, #120]	; (d43dc <loop+0xf0>)
   d4364:	f000 fc36 	bl	d4bd4 <_ZN5Print5printEPKc>
  Serial.print(sdm.readVal(SDM_PHASE_1_POWER), 2);                              //display power
   d4368:	f000 fe50 	bl	d500c <_Z16_fetch_usbserialv>
   d436c:	2201      	movs	r2, #1
   d436e:	4605      	mov	r5, r0
   d4370:	210c      	movs	r1, #12
   d4372:	4620      	mov	r0, r4
   d4374:	f7ff ff08 	bl	d4188 <_ZN3SDM7readValEth>
   d4378:	2102      	movs	r1, #2
   d437a:	4628      	mov	r0, r5
   d437c:	f000 fd2e 	bl	d4ddc <_ZN5Print5printEfi>
  Serial.println("W");
   d4380:	f000 fe44 	bl	d500c <_Z16_fetch_usbserialv>
   d4384:	4916      	ldr	r1, [pc, #88]	; (d43e0 <loop+0xf4>)
   d4386:	f000 fc38 	bl	d4bfa <_ZN5Print7printlnEPKc>

  Serial.print("Frequency: ");
   d438a:	f000 fe3f 	bl	d500c <_Z16_fetch_usbserialv>
   d438e:	4915      	ldr	r1, [pc, #84]	; (d43e4 <loop+0xf8>)
   d4390:	f000 fc20 	bl	d4bd4 <_ZN5Print5printEPKc>
  Serial.print(sdm.readVal(SDM_FREQUENCY), 2);                                  //display frequency
   d4394:	f000 fe3a 	bl	d500c <_Z16_fetch_usbserialv>
   d4398:	2201      	movs	r2, #1
   d439a:	4605      	mov	r5, r0
   d439c:	2146      	movs	r1, #70	; 0x46
   d439e:	4620      	mov	r0, r4
   d43a0:	f7ff fef2 	bl	d4188 <_ZN3SDM7readValEth>
   d43a4:	2102      	movs	r1, #2
   d43a6:	4628      	mov	r0, r5
   d43a8:	f000 fd18 	bl	d4ddc <_ZN5Print5printEfi>
  Serial.println("Hz");
   d43ac:	f000 fe2e 	bl	d500c <_Z16_fetch_usbserialv>
   d43b0:	490d      	ldr	r1, [pc, #52]	; (d43e8 <loop+0xfc>)
   d43b2:	f000 fc22 	bl	d4bfa <_ZN5Print7printlnEPKc>

  delay(1000);                                                                  //wait a while before next loop
   d43b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d43ba:	f000 f9e5 	bl	d4788 <delay>
}
   d43be:	b005      	add	sp, #20
   d43c0:	bd30      	pop	{r4, r5, pc}
   d43c2:	bf00      	nop
   d43c4:	000d5dcc 	.word	0x000d5dcc
   d43c8:	2003e560 	.word	0x2003e560
   d43cc:	000d5dd4 	.word	0x000d5dd4
   d43d0:	000d5de0 	.word	0x000d5de0
   d43d4:	000d5de2 	.word	0x000d5de2
   d43d8:	000d5dee 	.word	0x000d5dee
   d43dc:	000d5df0 	.word	0x000d5df0
   d43e0:	000d5dfc 	.word	0x000d5dfc
   d43e4:	000d5dfe 	.word	0x000d5dfe
   d43e8:	000d5e0a 	.word	0x000d5e0a

000d43ec <_GLOBAL__sub_I_sdm>:
SDM sdm(SDM_UART_BAUD, NOT_A_PIN,SDM_UART_CONFIG);                                              //config SDM on Serial1 (if available!)                                                                         //for SWSERIAL
   d43ec:	4803      	ldr	r0, [pc, #12]	; (d43fc <_GLOBAL__sub_I_sdm+0x10>)
   d43ee:	2300      	movs	r3, #0
   d43f0:	2202      	movs	r2, #2
   d43f2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d43f6:	f7ff be61 	b.w	d40bc <_ZN3SDMC1Elii>
   d43fa:	bf00      	nop
   d43fc:	2003e560 	.word	0x2003e560

000d4400 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <os_thread_yield+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	68db      	ldr	r3, [r3, #12]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030248 	.word	0x00030248

000d4410 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <os_mutex_recursive_create+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030248 	.word	0x00030248

000d4420 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_RNG_GetRandomNumber+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	685b      	ldr	r3, [r3, #4]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030218 	.word	0x00030218

000d4430 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	695b      	ldr	r3, [r3, #20]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030218 	.word	0x00030218

000d4440 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_Pin_Mode+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	689b      	ldr	r3, [r3, #8]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003022c 	.word	0x0003022c

000d4450 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_Get_Pin_Mode+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	68db      	ldr	r3, [r3, #12]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003022c 	.word	0x0003022c

000d4460 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_GPIO_Write+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	691b      	ldr	r3, [r3, #16]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003022c 	.word	0x0003022c

000d4470 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <hal_i2c_write+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	6a1b      	ldr	r3, [r3, #32]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030228 	.word	0x00030228

000d4480 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <hal_i2c_available+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	00030228 	.word	0x00030228

000d4490 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <hal_i2c_read+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030228 	.word	0x00030228

000d44a0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <hal_i2c_peek+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030228 	.word	0x00030228

000d44b0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <hal_i2c_flush+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030228 	.word	0x00030228

000d44c0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <hal_i2c_is_enabled+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030228 	.word	0x00030228

000d44d0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <hal_i2c_init+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030228 	.word	0x00030228

000d44e0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <inet_inet_ntop+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	695b      	ldr	r3, [r3, #20]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030264 	.word	0x00030264

000d44f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <netdb_freeaddrinfo+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	689b      	ldr	r3, [r3, #8]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030268 	.word	0x00030268

000d4500 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <netdb_getaddrinfo+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	68db      	ldr	r3, [r3, #12]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030268 	.word	0x00030268

000d4510 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <hal_spi_init+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	69db      	ldr	r3, [r3, #28]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030230 	.word	0x00030230

000d4520 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <hal_spi_is_enabled+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6a1b      	ldr	r3, [r3, #32]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030230 	.word	0x00030230

000d4530 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <hal_usart_init+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	681b      	ldr	r3, [r3, #0]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	0003023c 	.word	0x0003023c

000d4540 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <hal_usart_write+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	68db      	ldr	r3, [r3, #12]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003023c 	.word	0x0003023c

000d4550 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <hal_usart_available+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	691b      	ldr	r3, [r3, #16]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	0003023c 	.word	0x0003023c

000d4560 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <hal_usart_read+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	695b      	ldr	r3, [r3, #20]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	0003023c 	.word	0x0003023c

000d4570 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <hal_usart_peek+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	699b      	ldr	r3, [r3, #24]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	0003023c 	.word	0x0003023c

000d4580 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <hal_usart_flush+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	69db      	ldr	r3, [r3, #28]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	0003023c 	.word	0x0003023c

000d4590 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <hal_usart_is_enabled+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	6a1b      	ldr	r3, [r3, #32]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	0003023c 	.word	0x0003023c

000d45a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <hal_usart_available_data_for_write+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	0003023c 	.word	0x0003023c

000d45b0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <hal_usart_begin_config+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003023c 	.word	0x0003023c

000d45c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_USB_USART_Init+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	681b      	ldr	r3, [r3, #0]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003024c 	.word	0x0003024c

000d45d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_USB_USART_Begin+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	685b      	ldr	r3, [r3, #4]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003024c 	.word	0x0003024c

000d45e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_USB_USART_Available_Data+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	691b      	ldr	r3, [r3, #16]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003024c 	.word	0x0003024c

000d45f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	695b      	ldr	r3, [r3, #20]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003024c 	.word	0x0003024c

000d4600 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_USB_USART_Receive_Data+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	699b      	ldr	r3, [r3, #24]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003024c 	.word	0x0003024c

000d4610 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_USB_USART_Send_Data+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	69db      	ldr	r3, [r3, #28]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003024c 	.word	0x0003024c

000d4620 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <HAL_USB_USART_Flush_Data+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	6a1b      	ldr	r3, [r3, #32]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	0003024c 	.word	0x0003024c

000d4630 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <set_system_mode+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	685b      	ldr	r3, [r3, #4]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030220 	.word	0x00030220

000d4640 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <system_delay_ms+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	695b      	ldr	r3, [r3, #20]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030220 	.word	0x00030220

000d4650 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b03      	ldr	r3, [pc, #12]	; (d4660 <system_ctrl_set_app_request_handler+0x10>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d465a:	9301      	str	r3, [sp, #4]
   d465c:	bd08      	pop	{r3, pc}
   d465e:	0000      	.short	0x0000
   d4660:	00030220 	.word	0x00030220

000d4664 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b03      	ldr	r3, [pc, #12]	; (d4674 <system_ctrl_set_result+0x10>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d466e:	9301      	str	r3, [sp, #4]
   d4670:	bd08      	pop	{r3, pc}
   d4672:	0000      	.short	0x0000
   d4674:	00030220 	.word	0x00030220

000d4678 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <spark_set_random_seed_from_cloud_handler+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030244 	.word	0x00030244

000d4688 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <network_connect+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	685b      	ldr	r3, [r3, #4]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030240 	.word	0x00030240

000d4698 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <network_connecting+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	689b      	ldr	r3, [r3, #8]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030240 	.word	0x00030240

000d46a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <network_disconnect+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	68db      	ldr	r3, [r3, #12]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030240 	.word	0x00030240

000d46b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <network_ready+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	691b      	ldr	r3, [r3, #16]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030240 	.word	0x00030240

000d46c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <network_on+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	695b      	ldr	r3, [r3, #20]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030240 	.word	0x00030240

000d46d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <network_off+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	699b      	ldr	r3, [r3, #24]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030240 	.word	0x00030240

000d46e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <network_listen+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	69db      	ldr	r3, [r3, #28]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030240 	.word	0x00030240

000d46f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <network_listening+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6a1b      	ldr	r3, [r3, #32]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030240 	.word	0x00030240

000d4708 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <network_set_listen_timeout+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030240 	.word	0x00030240

000d4718 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <network_get_listen_timeout+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030240 	.word	0x00030240

000d4728 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <network_is_on+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030240 	.word	0x00030240

000d4738 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <network_is_off+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030240 	.word	0x00030240

000d4748 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <malloc+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	681b      	ldr	r3, [r3, #0]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003021c 	.word	0x0003021c

000d4758 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <free+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	685b      	ldr	r3, [r3, #4]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003021c 	.word	0x0003021c

000d4768 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <sprintf+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	68db      	ldr	r3, [r3, #12]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003021c 	.word	0x0003021c

000d4778 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <newlib_impure_ptr_callback+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003021c 	.word	0x0003021c

000d4788 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4788:	2100      	movs	r1, #0
   d478a:	f7ff bf59 	b.w	d4640 <system_delay_ms>
	...

000d4790 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4790:	4802      	ldr	r0, [pc, #8]	; (d479c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4792:	2300      	movs	r3, #0
   d4794:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4796:	f7ff be3b 	b.w	d4410 <os_mutex_recursive_create>
   d479a:	bf00      	nop
   d479c:	2003e580 	.word	0x2003e580

000d47a0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d47a0:	2200      	movs	r2, #0
   d47a2:	6840      	ldr	r0, [r0, #4]
   d47a4:	4611      	mov	r1, r2
   d47a6:	f7ff bf87 	b.w	d46b8 <network_ready>

000d47aa <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d47aa:	2200      	movs	r2, #0
   d47ac:	6840      	ldr	r0, [r0, #4]
   d47ae:	4611      	mov	r1, r2
   d47b0:	f7ff bfa2 	b.w	d46f8 <network_listening>

000d47b4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d47b4:	2200      	movs	r2, #0
   d47b6:	6840      	ldr	r0, [r0, #4]
   d47b8:	4611      	mov	r1, r2
   d47ba:	f7ff bfad 	b.w	d4718 <network_get_listen_timeout>

000d47be <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d47be:	6840      	ldr	r0, [r0, #4]
   d47c0:	2200      	movs	r2, #0
   d47c2:	f7ff bfa1 	b.w	d4708 <network_set_listen_timeout>

000d47c6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d47c6:	6840      	ldr	r0, [r0, #4]
   d47c8:	2200      	movs	r2, #0
   d47ca:	f081 0101 	eor.w	r1, r1, #1
   d47ce:	f7ff bf8b 	b.w	d46e8 <network_listen>

000d47d2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d47d2:	2300      	movs	r3, #0
   d47d4:	6840      	ldr	r0, [r0, #4]
   d47d6:	461a      	mov	r2, r3
   d47d8:	4619      	mov	r1, r3
   d47da:	f7ff bf7d 	b.w	d46d8 <network_off>

000d47de <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d47de:	2300      	movs	r3, #0
   d47e0:	6840      	ldr	r0, [r0, #4]
   d47e2:	461a      	mov	r2, r3
   d47e4:	4619      	mov	r1, r3
   d47e6:	f7ff bf6f 	b.w	d46c8 <network_on>

000d47ea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d47ea:	2200      	movs	r2, #0
   d47ec:	6840      	ldr	r0, [r0, #4]
   d47ee:	4611      	mov	r1, r2
   d47f0:	f7ff bf52 	b.w	d4698 <network_connecting>

000d47f4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47f4:	6840      	ldr	r0, [r0, #4]
   d47f6:	2200      	movs	r2, #0
   d47f8:	2102      	movs	r1, #2
   d47fa:	f7ff bf55 	b.w	d46a8 <network_disconnect>

000d47fe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d47fe:	2300      	movs	r3, #0
   d4800:	6840      	ldr	r0, [r0, #4]
   d4802:	461a      	mov	r2, r3
   d4804:	f7ff bf40 	b.w	d4688 <network_connect>

000d4808 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4808:	4b08      	ldr	r3, [pc, #32]	; (d482c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d480a:	b510      	push	{r4, lr}
   d480c:	2428      	movs	r4, #40	; 0x28
   d480e:	4622      	mov	r2, r4
   d4810:	4618      	mov	r0, r3
   d4812:	2100      	movs	r1, #0
   d4814:	f001 fa2e 	bl	d5c74 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4818:	4b05      	ldr	r3, [pc, #20]	; (d4830 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d481a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d481c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4820:	6042      	str	r2, [r0, #4]
   d4822:	2204      	movs	r2, #4
   d4824:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4826:	4a03      	ldr	r2, [pc, #12]	; (d4834 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4828:	601a      	str	r2, [r3, #0]
   d482a:	bd10      	pop	{r4, pc}
   d482c:	2003e58c 	.word	0x2003e58c
   d4830:	2003e584 	.word	0x2003e584
   d4834:	000d5e18 	.word	0x000d5e18

000d4838 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4838:	2200      	movs	r2, #0
   d483a:	6840      	ldr	r0, [r0, #4]
   d483c:	4611      	mov	r1, r2
   d483e:	f7ff bf5b 	b.w	d46f8 <network_listening>

000d4842 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4842:	2200      	movs	r2, #0
   d4844:	6840      	ldr	r0, [r0, #4]
   d4846:	4611      	mov	r1, r2
   d4848:	f7ff bf66 	b.w	d4718 <network_get_listen_timeout>

000d484c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d484c:	6840      	ldr	r0, [r0, #4]
   d484e:	2200      	movs	r2, #0
   d4850:	f7ff bf5a 	b.w	d4708 <network_set_listen_timeout>

000d4854 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4854:	6840      	ldr	r0, [r0, #4]
   d4856:	2200      	movs	r2, #0
   d4858:	f081 0101 	eor.w	r1, r1, #1
   d485c:	f7ff bf44 	b.w	d46e8 <network_listen>

000d4860 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4860:	2300      	movs	r3, #0
   d4862:	6840      	ldr	r0, [r0, #4]
   d4864:	461a      	mov	r2, r3
   d4866:	4619      	mov	r1, r3
   d4868:	f7ff bf36 	b.w	d46d8 <network_off>

000d486c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d486c:	2300      	movs	r3, #0
   d486e:	6840      	ldr	r0, [r0, #4]
   d4870:	461a      	mov	r2, r3
   d4872:	4619      	mov	r1, r3
   d4874:	f7ff bf28 	b.w	d46c8 <network_on>

000d4878 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4878:	2200      	movs	r2, #0
   d487a:	6840      	ldr	r0, [r0, #4]
   d487c:	4611      	mov	r1, r2
   d487e:	f7ff bf1b 	b.w	d46b8 <network_ready>

000d4882 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4882:	2200      	movs	r2, #0
   d4884:	6840      	ldr	r0, [r0, #4]
   d4886:	4611      	mov	r1, r2
   d4888:	f7ff bf06 	b.w	d4698 <network_connecting>

000d488c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d488c:	6840      	ldr	r0, [r0, #4]
   d488e:	2200      	movs	r2, #0
   d4890:	2102      	movs	r1, #2
   d4892:	f7ff bf09 	b.w	d46a8 <network_disconnect>

000d4896 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4896:	2300      	movs	r3, #0
   d4898:	6840      	ldr	r0, [r0, #4]
   d489a:	461a      	mov	r2, r3
   d489c:	f7ff bef4 	b.w	d4688 <network_connect>

000d48a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d48a0:	4b02      	ldr	r3, [pc, #8]	; (d48ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d48a2:	2203      	movs	r2, #3
   d48a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d48a6:	4a02      	ldr	r2, [pc, #8]	; (d48b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d48a8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d48aa:	4770      	bx	lr
   d48ac:	2003e5b4 	.word	0x2003e5b4
   d48b0:	000d5e54 	.word	0x000d5e54

000d48b4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d48b4:	4770      	bx	lr

000d48b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d48b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48b8:	4606      	mov	r6, r0
   d48ba:	4615      	mov	r5, r2
   d48bc:	460c      	mov	r4, r1
   d48be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d48c0:	42bc      	cmp	r4, r7
   d48c2:	d006      	beq.n	d48d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d48c4:	6833      	ldr	r3, [r6, #0]
   d48c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d48ca:	689b      	ldr	r3, [r3, #8]
   d48cc:	4630      	mov	r0, r6
   d48ce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d48d0:	e7f6      	b.n	d48c0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d48d2:	4628      	mov	r0, r5
   d48d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d48d6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d48d6:	7c00      	ldrb	r0, [r0, #16]
   d48d8:	2200      	movs	r2, #0
   d48da:	f7ff bdc9 	b.w	d4470 <hal_i2c_write>

000d48de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d48de:	7c00      	ldrb	r0, [r0, #16]
   d48e0:	2100      	movs	r1, #0
   d48e2:	f7ff bdcd 	b.w	d4480 <hal_i2c_available>

000d48e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d48e6:	7c00      	ldrb	r0, [r0, #16]
   d48e8:	2100      	movs	r1, #0
   d48ea:	f7ff bdd1 	b.w	d4490 <hal_i2c_read>

000d48ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d48ee:	7c00      	ldrb	r0, [r0, #16]
   d48f0:	2100      	movs	r1, #0
   d48f2:	f7ff bdd5 	b.w	d44a0 <hal_i2c_peek>

000d48f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d48f6:	7c00      	ldrb	r0, [r0, #16]
   d48f8:	2100      	movs	r1, #0
   d48fa:	f7ff bdd9 	b.w	d44b0 <hal_i2c_flush>

000d48fe <_ZN7TwoWireD0Ev>:
   d48fe:	b510      	push	{r4, lr}
   d4900:	2114      	movs	r1, #20
   d4902:	4604      	mov	r4, r0
   d4904:	f000 fcea 	bl	d52dc <_ZdlPvj>
   d4908:	4620      	mov	r0, r4
   d490a:	bd10      	pop	{r4, pc}

000d490c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d490c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d490e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4912:	4604      	mov	r4, r0
   d4914:	4608      	mov	r0, r1
   d4916:	2100      	movs	r1, #0
   d4918:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d491c:	4b03      	ldr	r3, [pc, #12]	; (d492c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d491e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4920:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4922:	4611      	mov	r1, r2
   d4924:	f7ff fdd4 	bl	d44d0 <hal_i2c_init>
}
   d4928:	4620      	mov	r0, r4
   d492a:	bd10      	pop	{r4, pc}
   d492c:	000d5e90 	.word	0x000d5e90

000d4930 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4930:	4770      	bx	lr

000d4932 <_ZN9IPAddressD0Ev>:
   d4932:	b510      	push	{r4, lr}
   d4934:	2118      	movs	r1, #24
   d4936:	4604      	mov	r4, r0
   d4938:	f000 fcd0 	bl	d52dc <_ZdlPvj>
   d493c:	4620      	mov	r0, r4
   d493e:	bd10      	pop	{r4, pc}

000d4940 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4940:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4942:	7d03      	ldrb	r3, [r0, #20]
   d4944:	2b06      	cmp	r3, #6
{
   d4946:	b08d      	sub	sp, #52	; 0x34
   d4948:	460e      	mov	r6, r1
   d494a:	f100 0704 	add.w	r7, r0, #4
   d494e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4952:	d012      	beq.n	d497a <_ZNK9IPAddress7printToER5Print+0x3a>
   d4954:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4958:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d495c:	220a      	movs	r2, #10
   d495e:	4630      	mov	r0, r6
   d4960:	f000 f955 	bl	d4c0e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4964:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4966:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4968:	d019      	beq.n	d499e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d496a:	2c00      	cmp	r4, #0
   d496c:	d0f4      	beq.n	d4958 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d496e:	212e      	movs	r1, #46	; 0x2e
   d4970:	4630      	mov	r0, r6
   d4972:	f000 f933 	bl	d4bdc <_ZN5Print5printEc>
   d4976:	4404      	add	r4, r0
   d4978:	e7ee      	b.n	d4958 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d497a:	232f      	movs	r3, #47	; 0x2f
   d497c:	466a      	mov	r2, sp
   d497e:	4639      	mov	r1, r7
   d4980:	200a      	movs	r0, #10
		buf[0] = 0;
   d4982:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4986:	f7ff fdab 	bl	d44e0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d498a:	4668      	mov	r0, sp
   d498c:	f001 f99e 	bl	d5ccc <strlen>
   d4990:	6833      	ldr	r3, [r6, #0]
   d4992:	4602      	mov	r2, r0
   d4994:	68db      	ldr	r3, [r3, #12]
   d4996:	4669      	mov	r1, sp
   d4998:	4630      	mov	r0, r6
   d499a:	4798      	blx	r3
   d499c:	4604      	mov	r4, r0
    }
    return n;
}
   d499e:	4620      	mov	r0, r4
   d49a0:	b00d      	add	sp, #52	; 0x34
   d49a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49a4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d49a4:	b510      	push	{r4, lr}
   d49a6:	4b05      	ldr	r3, [pc, #20]	; (d49bc <_ZN9IPAddressC1Ev+0x18>)
   d49a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d49aa:	2211      	movs	r2, #17
   d49ac:	f840 3b04 	str.w	r3, [r0], #4
   d49b0:	2100      	movs	r1, #0
   d49b2:	f001 f95f 	bl	d5c74 <memset>
}
   d49b6:	4620      	mov	r0, r4
   d49b8:	bd10      	pop	{r4, pc}
   d49ba:	bf00      	nop
   d49bc:	000d5eb8 	.word	0x000d5eb8

000d49c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d49c0:	4603      	mov	r3, r0
   d49c2:	4a07      	ldr	r2, [pc, #28]	; (d49e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d49c4:	b510      	push	{r4, lr}
   d49c6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d49ca:	f101 0210 	add.w	r2, r1, #16
   d49ce:	f851 4b04 	ldr.w	r4, [r1], #4
   d49d2:	f843 4b04 	str.w	r4, [r3], #4
   d49d6:	4291      	cmp	r1, r2
   d49d8:	d1f9      	bne.n	d49ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d49da:	780a      	ldrb	r2, [r1, #0]
   d49dc:	701a      	strb	r2, [r3, #0]
}
   d49de:	bd10      	pop	{r4, pc}
   d49e0:	000d5eb8 	.word	0x000d5eb8

000d49e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d49e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d49e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d49ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d49ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d49f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d49f6:	2304      	movs	r3, #4
   d49f8:	6041      	str	r1, [r0, #4]
   d49fa:	7503      	strb	r3, [r0, #20]
}
   d49fc:	bd10      	pop	{r4, pc}

000d49fe <_ZN9IPAddressaSEPKh>:
{
   d49fe:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4a00:	78cb      	ldrb	r3, [r1, #3]
   d4a02:	9300      	str	r3, [sp, #0]
   d4a04:	788b      	ldrb	r3, [r1, #2]
   d4a06:	784a      	ldrb	r2, [r1, #1]
   d4a08:	7809      	ldrb	r1, [r1, #0]
   d4a0a:	f7ff ffeb 	bl	d49e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4a0e:	b002      	add	sp, #8
   d4a10:	bd10      	pop	{r4, pc}
	...

000d4a14 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4a14:	4b01      	ldr	r3, [pc, #4]	; (d4a1c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4a16:	4a02      	ldr	r2, [pc, #8]	; (d4a20 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4a18:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4a1a:	4770      	bx	lr
   d4a1c:	2003e5bc 	.word	0x2003e5bc
   d4a20:	000d5ec4 	.word	0x000d5ec4

000d4a24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4a24:	2300      	movs	r3, #0
   d4a26:	6840      	ldr	r0, [r0, #4]
   d4a28:	461a      	mov	r2, r3
   d4a2a:	f7ff be2d 	b.w	d4688 <network_connect>

000d4a2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4a2e:	6840      	ldr	r0, [r0, #4]
   d4a30:	2200      	movs	r2, #0
   d4a32:	2102      	movs	r1, #2
   d4a34:	f7ff be38 	b.w	d46a8 <network_disconnect>

000d4a38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4a38:	2200      	movs	r2, #0
   d4a3a:	6840      	ldr	r0, [r0, #4]
   d4a3c:	4611      	mov	r1, r2
   d4a3e:	f7ff be2b 	b.w	d4698 <network_connecting>

000d4a42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4a42:	2200      	movs	r2, #0
   d4a44:	6840      	ldr	r0, [r0, #4]
   d4a46:	4611      	mov	r1, r2
   d4a48:	f7ff be36 	b.w	d46b8 <network_ready>

000d4a4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4a4c:	2300      	movs	r3, #0
   d4a4e:	6840      	ldr	r0, [r0, #4]
   d4a50:	461a      	mov	r2, r3
   d4a52:	4619      	mov	r1, r3
   d4a54:	f7ff be38 	b.w	d46c8 <network_on>

000d4a58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4a58:	2300      	movs	r3, #0
   d4a5a:	6840      	ldr	r0, [r0, #4]
   d4a5c:	461a      	mov	r2, r3
   d4a5e:	4619      	mov	r1, r3
   d4a60:	f7ff be3a 	b.w	d46d8 <network_off>

000d4a64 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4a64:	6840      	ldr	r0, [r0, #4]
   d4a66:	2100      	movs	r1, #0
   d4a68:	f7ff be5e 	b.w	d4728 <network_is_on>

000d4a6c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4a6c:	6840      	ldr	r0, [r0, #4]
   d4a6e:	2100      	movs	r1, #0
   d4a70:	f7ff be62 	b.w	d4738 <network_is_off>

000d4a74 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4a74:	6840      	ldr	r0, [r0, #4]
   d4a76:	2200      	movs	r2, #0
   d4a78:	f081 0101 	eor.w	r1, r1, #1
   d4a7c:	f7ff be34 	b.w	d46e8 <network_listen>

000d4a80 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4a80:	6840      	ldr	r0, [r0, #4]
   d4a82:	2200      	movs	r2, #0
   d4a84:	f7ff be40 	b.w	d4708 <network_set_listen_timeout>

000d4a88 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4a88:	2200      	movs	r2, #0
   d4a8a:	6840      	ldr	r0, [r0, #4]
   d4a8c:	4611      	mov	r1, r2
   d4a8e:	f7ff be43 	b.w	d4718 <network_get_listen_timeout>

000d4a92 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4a92:	2200      	movs	r2, #0
   d4a94:	6840      	ldr	r0, [r0, #4]
   d4a96:	4611      	mov	r1, r2
   d4a98:	f7ff be2e 	b.w	d46f8 <network_listening>

000d4a9c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4aa0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4aa2:	b095      	sub	sp, #84	; 0x54
   d4aa4:	4616      	mov	r6, r2
   d4aa6:	460d      	mov	r5, r1
   d4aa8:	4607      	mov	r7, r0
    IPAddress addr;
   d4aaa:	f7ff ff7b 	bl	d49a4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4aae:	4621      	mov	r1, r4
   d4ab0:	2218      	movs	r2, #24
   d4ab2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4ab4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4ab6:	f001 f8dd 	bl	d5c74 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4aba:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4abc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4ac0:	4621      	mov	r1, r4
   d4ac2:	466b      	mov	r3, sp
   d4ac4:	aa0c      	add	r2, sp, #48	; 0x30
   d4ac6:	4630      	mov	r0, r6
   d4ac8:	f7ff fd1a 	bl	d4500 <netdb_getaddrinfo>
    if (!r) {
   d4acc:	4604      	mov	r4, r0
   d4ace:	2800      	cmp	r0, #0
   d4ad0:	d146      	bne.n	d4b60 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4ad2:	4602      	mov	r2, r0
   d4ad4:	2101      	movs	r1, #1
   d4ad6:	6868      	ldr	r0, [r5, #4]
   d4ad8:	f7ff fdee 	bl	d46b8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4adc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4ade:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ae0:	4622      	mov	r2, r4
   d4ae2:	6868      	ldr	r0, [r5, #4]
   d4ae4:	f7ff fde8 	bl	d46b8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ae8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4aea:	4681      	mov	r9, r0
        bool ok = false;
   d4aec:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4aee:	2e00      	cmp	r6, #0
   d4af0:	d036      	beq.n	d4b60 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4af2:	2900      	cmp	r1, #0
   d4af4:	d134      	bne.n	d4b60 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4af6:	6873      	ldr	r3, [r6, #4]
   d4af8:	2b02      	cmp	r3, #2
   d4afa:	d003      	beq.n	d4b04 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4afc:	2b0a      	cmp	r3, #10
   d4afe:	d00b      	beq.n	d4b18 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b00:	69f6      	ldr	r6, [r6, #28]
   d4b02:	e7f4      	b.n	d4aee <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4b04:	f1b8 0f00 	cmp.w	r8, #0
   d4b08:	d004      	beq.n	d4b14 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4b0a:	6971      	ldr	r1, [r6, #20]
   d4b0c:	4638      	mov	r0, r7
   d4b0e:	3104      	adds	r1, #4
   d4b10:	f7ff ff75 	bl	d49fe <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4b14:	4641      	mov	r1, r8
   d4b16:	e7f3      	b.n	d4b00 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4b18:	f1b9 0f00 	cmp.w	r9, #0
   d4b1c:	d101      	bne.n	d4b22 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4b1e:	4649      	mov	r1, r9
   d4b20:	e7ee      	b.n	d4b00 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4b22:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4b24:	2210      	movs	r2, #16
   d4b26:	a801      	add	r0, sp, #4
   d4b28:	f001 f8a4 	bl	d5c74 <memset>
                    a.v = 6;
   d4b2c:	2306      	movs	r3, #6
   d4b2e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4b32:	ad01      	add	r5, sp, #4
   d4b34:	f104 0308 	add.w	r3, r4, #8
   d4b38:	3418      	adds	r4, #24
   d4b3a:	6818      	ldr	r0, [r3, #0]
   d4b3c:	6859      	ldr	r1, [r3, #4]
   d4b3e:	462a      	mov	r2, r5
   d4b40:	c203      	stmia	r2!, {r0, r1}
   d4b42:	3308      	adds	r3, #8
   d4b44:	42a3      	cmp	r3, r4
   d4b46:	4615      	mov	r5, r2
   d4b48:	d1f7      	bne.n	d4b3a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4b4a:	a901      	add	r1, sp, #4
   d4b4c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4b4e:	ad07      	add	r5, sp, #28
   d4b50:	f7ff ff36 	bl	d49c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b56:	1d3c      	adds	r4, r7, #4
   d4b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b5a:	682b      	ldr	r3, [r5, #0]
   d4b5c:	7023      	strb	r3, [r4, #0]
   d4b5e:	e7de      	b.n	d4b1e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4b60:	9800      	ldr	r0, [sp, #0]
   d4b62:	f7ff fcc5 	bl	d44f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4b66:	4638      	mov	r0, r7
   d4b68:	b015      	add	sp, #84	; 0x54
   d4b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4b70 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4b70:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4b72:	4a03      	ldr	r2, [pc, #12]	; (d4b80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4b74:	601a      	str	r2, [r3, #0]
   d4b76:	2200      	movs	r2, #0
   d4b78:	605a      	str	r2, [r3, #4]

} // spark
   d4b7a:	4770      	bx	lr
   d4b7c:	2003e5c0 	.word	0x2003e5c0
   d4b80:	000d5ed0 	.word	0x000d5ed0

000d4b84 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b86:	4606      	mov	r6, r0
   d4b88:	460d      	mov	r5, r1
  size_t n = 0;
   d4b8a:	188f      	adds	r7, r1, r2
   d4b8c:	2400      	movs	r4, #0
  while (size--) {
   d4b8e:	42bd      	cmp	r5, r7
   d4b90:	d00c      	beq.n	d4bac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b92:	6833      	ldr	r3, [r6, #0]
   d4b94:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b98:	689b      	ldr	r3, [r3, #8]
   d4b9a:	4630      	mov	r0, r6
   d4b9c:	4798      	blx	r3
     if (chunk>=0)
   d4b9e:	1e03      	subs	r3, r0, #0
   d4ba0:	db01      	blt.n	d4ba6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4ba2:	441c      	add	r4, r3
  while (size--) {
   d4ba4:	e7f3      	b.n	d4b8e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4ba6:	2c00      	cmp	r4, #0
   d4ba8:	bf08      	it	eq
   d4baa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4bac:	4620      	mov	r0, r4
   d4bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bb0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d4bb0:	b513      	push	{r0, r1, r4, lr}
   d4bb2:	4604      	mov	r4, r0
    }
   d4bb4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4bb6:	b159      	cbz	r1, d4bd0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4bb8:	9101      	str	r1, [sp, #4]
   d4bba:	f001 f887 	bl	d5ccc <strlen>
   d4bbe:	6823      	ldr	r3, [r4, #0]
   d4bc0:	9901      	ldr	r1, [sp, #4]
   d4bc2:	68db      	ldr	r3, [r3, #12]
   d4bc4:	4602      	mov	r2, r0
   d4bc6:	4620      	mov	r0, r4
    }
   d4bc8:	b002      	add	sp, #8
   d4bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4bce:	4718      	bx	r3
    }
   d4bd0:	b002      	add	sp, #8
   d4bd2:	bd10      	pop	{r4, pc}

000d4bd4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4bd4:	b508      	push	{r3, lr}
  return write(str);
   d4bd6:	f7ff ffeb 	bl	d4bb0 <_ZN5Print5writeEPKc>
}
   d4bda:	bd08      	pop	{r3, pc}

000d4bdc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4bdc:	6803      	ldr	r3, [r0, #0]
   d4bde:	689b      	ldr	r3, [r3, #8]
   d4be0:	4718      	bx	r3

000d4be2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4be2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4be4:	210d      	movs	r1, #13
{
   d4be6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4be8:	f7ff fff8 	bl	d4bdc <_ZN5Print5printEc>
  n += print('\n');
   d4bec:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4bee:	4604      	mov	r4, r0
  n += print('\n');
   d4bf0:	4628      	mov	r0, r5
   d4bf2:	f7ff fff3 	bl	d4bdc <_ZN5Print5printEc>
  return n;
}
   d4bf6:	4420      	add	r0, r4
   d4bf8:	bd38      	pop	{r3, r4, r5, pc}

000d4bfa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4bfa:	b538      	push	{r3, r4, r5, lr}
   d4bfc:	4605      	mov	r5, r0
  return write(str);
   d4bfe:	f7ff ffd7 	bl	d4bb0 <_ZN5Print5writeEPKc>
   d4c02:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4c04:	4628      	mov	r0, r5
   d4c06:	f7ff ffec 	bl	d4be2 <_ZN5Print7printlnEv>
  return n;
}
   d4c0a:	4420      	add	r0, r4
   d4c0c:	bd38      	pop	{r3, r4, r5, pc}

000d4c0e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4c0e:	b530      	push	{r4, r5, lr}
   d4c10:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4c12:	2300      	movs	r3, #0
   d4c14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c18:	2a01      	cmp	r2, #1
   d4c1a:	bf98      	it	ls
   d4c1c:	220a      	movls	r2, #10
   d4c1e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4c20:	460d      	mov	r5, r1
   d4c22:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4c26:	fb01 5312 	mls	r3, r1, r2, r5
   d4c2a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c2e:	2b09      	cmp	r3, #9
   d4c30:	bf94      	ite	ls
   d4c32:	3330      	addls	r3, #48	; 0x30
   d4c34:	3337      	addhi	r3, #55	; 0x37
   d4c36:	b2db      	uxtb	r3, r3
  } while(n);
   d4c38:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c3a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4c3e:	d9ef      	bls.n	d4c20 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4c40:	4621      	mov	r1, r4
   d4c42:	f7ff ffb5 	bl	d4bb0 <_ZN5Print5writeEPKc>
}
   d4c46:	b00b      	add	sp, #44	; 0x2c
   d4c48:	bd30      	pop	{r4, r5, pc}
	...

000d4c4c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c50:	ec55 4b10 	vmov	r4, r5, d0
   d4c54:	4606      	mov	r6, r0
   d4c56:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4c58:	ee10 2a10 	vmov	r2, s0
   d4c5c:	ee10 0a10 	vmov	r0, s0
   d4c60:	462b      	mov	r3, r5
   d4c62:	4629      	mov	r1, r5
   d4c64:	f000 ff94 	bl	d5b90 <__aeabi_dcmpun>
   d4c68:	b140      	cbz	r0, d4c7c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d4c6a:	4953      	ldr	r1, [pc, #332]	; (d4db8 <_ZN5Print10printFloatEdh+0x16c>)
   d4c6c:	4630      	mov	r0, r6
   d4c6e:	f7ff ff9f 	bl	d4bb0 <_ZN5Print5writeEPKc>
   d4c72:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d4c74:	4650      	mov	r0, sl
   d4c76:	b003      	add	sp, #12
   d4c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d4c7c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d4c80:	4b4e      	ldr	r3, [pc, #312]	; (d4dbc <_ZN5Print10printFloatEdh+0x170>)
   d4c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4c86:	4620      	mov	r0, r4
   d4c88:	4649      	mov	r1, r9
   d4c8a:	f000 ff81 	bl	d5b90 <__aeabi_dcmpun>
   d4c8e:	b948      	cbnz	r0, d4ca4 <_ZN5Print10printFloatEdh+0x58>
   d4c90:	4b4a      	ldr	r3, [pc, #296]	; (d4dbc <_ZN5Print10printFloatEdh+0x170>)
   d4c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4c96:	4620      	mov	r0, r4
   d4c98:	4649      	mov	r1, r9
   d4c9a:	f000 ff5b 	bl	d5b54 <__aeabi_dcmple>
   d4c9e:	b908      	cbnz	r0, d4ca4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d4ca0:	4947      	ldr	r1, [pc, #284]	; (d4dc0 <_ZN5Print10printFloatEdh+0x174>)
   d4ca2:	e7e3      	b.n	d4c6c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4ca4:	4b47      	ldr	r3, [pc, #284]	; (d4dc4 <_ZN5Print10printFloatEdh+0x178>)
   d4ca6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4caa:	4620      	mov	r0, r4
   d4cac:	4629      	mov	r1, r5
   d4cae:	f000 ff65 	bl	d5b7c <__aeabi_dcmpgt>
   d4cb2:	b108      	cbz	r0, d4cb8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d4cb4:	4944      	ldr	r1, [pc, #272]	; (d4dc8 <_ZN5Print10printFloatEdh+0x17c>)
   d4cb6:	e7d9      	b.n	d4c6c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4cb8:	4b44      	ldr	r3, [pc, #272]	; (d4dcc <_ZN5Print10printFloatEdh+0x180>)
   d4cba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4cbe:	4620      	mov	r0, r4
   d4cc0:	4629      	mov	r1, r5
   d4cc2:	f000 ff3d 	bl	d5b40 <__aeabi_dcmplt>
   d4cc6:	2800      	cmp	r0, #0
   d4cc8:	d1f4      	bne.n	d4cb4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d4cca:	2200      	movs	r2, #0
   d4ccc:	2300      	movs	r3, #0
   d4cce:	4620      	mov	r0, r4
   d4cd0:	4629      	mov	r1, r5
   d4cd2:	f000 ff35 	bl	d5b40 <__aeabi_dcmplt>
   d4cd6:	b1d0      	cbz	r0, d4d0e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d4cd8:	212d      	movs	r1, #45	; 0x2d
   d4cda:	4630      	mov	r0, r6
   d4cdc:	f7ff ff7e 	bl	d4bdc <_ZN5Print5printEc>
     number = -number;
   d4ce0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d4ce4:	4682      	mov	sl, r0
     number = -number;
   d4ce6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d4ce8:	4939      	ldr	r1, [pc, #228]	; (d4dd0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d4cea:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d4dd8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d4cee:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d4cf2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d4cf4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d4cf8:	fa5f f38b 	uxtb.w	r3, fp
   d4cfc:	429f      	cmp	r7, r3
   d4cfe:	d908      	bls.n	d4d12 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d4d00:	4642      	mov	r2, r8
   d4d02:	464b      	mov	r3, r9
   d4d04:	f000 fdd4 	bl	d58b0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d4d08:	f10b 0b01 	add.w	fp, fp, #1
   d4d0c:	e7f4      	b.n	d4cf8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d4d0e:	4682      	mov	sl, r0
   d4d10:	e7ea      	b.n	d4ce8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d4d12:	4622      	mov	r2, r4
   d4d14:	462b      	mov	r3, r5
   d4d16:	f000 faeb 	bl	d52f0 <__adddf3>
   d4d1a:	460d      	mov	r5, r1
   d4d1c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d4d1e:	f000 ff75 	bl	d5c0c <__aeabi_d2uiz>
   d4d22:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d4d24:	f000 fc20 	bl	d5568 <__aeabi_ui2d>
   d4d28:	4602      	mov	r2, r0
   d4d2a:	460b      	mov	r3, r1
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	4629      	mov	r1, r5
   d4d30:	f000 fadc 	bl	d52ec <__aeabi_dsub>
        return printNumber(val, base) + t;
   d4d34:	220a      	movs	r2, #10
   d4d36:	4604      	mov	r4, r0
   d4d38:	460d      	mov	r5, r1
   d4d3a:	4630      	mov	r0, r6
   d4d3c:	4641      	mov	r1, r8
   d4d3e:	f7ff ff66 	bl	d4c0e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d4d42:	4482      	add	sl, r0
  if (digits > 0) {
   d4d44:	b127      	cbz	r7, d4d50 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d4d46:	4923      	ldr	r1, [pc, #140]	; (d4dd4 <_ZN5Print10printFloatEdh+0x188>)
   d4d48:	4630      	mov	r0, r6
   d4d4a:	f7ff ff31 	bl	d4bb0 <_ZN5Print5writeEPKc>
    n += print(".");
   d4d4e:	4482      	add	sl, r0
    remainder *= 10.0;
   d4d50:	f8df 9084 	ldr.w	r9, [pc, #132]	; d4dd8 <_ZN5Print10printFloatEdh+0x18c>
   d4d54:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d4d58:	3f01      	subs	r7, #1
   d4d5a:	b2ff      	uxtb	r7, r7
   d4d5c:	2fff      	cmp	r7, #255	; 0xff
   d4d5e:	d089      	beq.n	d4c74 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d4d60:	4642      	mov	r2, r8
   d4d62:	464b      	mov	r3, r9
   d4d64:	4620      	mov	r0, r4
   d4d66:	4629      	mov	r1, r5
   d4d68:	f000 fc78 	bl	d565c <__aeabi_dmul>
   d4d6c:	4604      	mov	r4, r0
   d4d6e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d4d70:	f000 ff24 	bl	d5bbc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d4d74:	f1b0 0b00 	subs.w	fp, r0, #0
   d4d78:	da1a      	bge.n	d4db0 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d4d7a:	212d      	movs	r1, #45	; 0x2d
   d4d7c:	4630      	mov	r0, r6
   d4d7e:	f7ff ff2d 	bl	d4bdc <_ZN5Print5printEc>
            val = -n;
   d4d82:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d4d86:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d4d88:	220a      	movs	r2, #10
   d4d8a:	4630      	mov	r0, r6
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	f7ff ff3e 	bl	d4c0e <_ZN5Print11printNumberEmh>
   d4d92:	9b01      	ldr	r3, [sp, #4]
   d4d94:	4418      	add	r0, r3
    n += print(toPrint);
   d4d96:	4482      	add	sl, r0
    remainder -= toPrint;
   d4d98:	4658      	mov	r0, fp
   d4d9a:	f000 fbf5 	bl	d5588 <__aeabi_i2d>
   d4d9e:	4602      	mov	r2, r0
   d4da0:	460b      	mov	r3, r1
   d4da2:	4620      	mov	r0, r4
   d4da4:	4629      	mov	r1, r5
   d4da6:	f000 faa1 	bl	d52ec <__aeabi_dsub>
   d4daa:	4604      	mov	r4, r0
   d4dac:	460d      	mov	r5, r1
  while (digits-- > 0)
   d4dae:	e7d3      	b.n	d4d58 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d4db0:	4659      	mov	r1, fp
        size_t t = 0;
   d4db2:	2300      	movs	r3, #0
   d4db4:	e7e8      	b.n	d4d88 <_ZN5Print10printFloatEdh+0x13c>
   d4db6:	bf00      	nop
   d4db8:	000d5f04 	.word	0x000d5f04
   d4dbc:	7fefffff 	.word	0x7fefffff
   d4dc0:	000d5f08 	.word	0x000d5f08
   d4dc4:	41efffff 	.word	0x41efffff
   d4dc8:	000d5f0c 	.word	0x000d5f0c
   d4dcc:	c1efffff 	.word	0xc1efffff
   d4dd0:	3fe00000 	.word	0x3fe00000
   d4dd4:	000d5f10 	.word	0x000d5f10
   d4dd8:	40240000 	.word	0x40240000

000d4ddc <_ZN5Print5printEfi>:
{
   d4ddc:	b538      	push	{r3, r4, r5, lr}
   d4dde:	4604      	mov	r4, r0
   d4de0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d4de4:	b2cd      	uxtb	r5, r1
   d4de6:	f000 fbe1 	bl	d55ac <__aeabi_f2d>
   d4dea:	ec41 0b10 	vmov	d0, r0, r1
   d4dee:	4629      	mov	r1, r5
   d4df0:	4620      	mov	r0, r4
}
   d4df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d4df6:	f7ff bf29 	b.w	d4c4c <_ZN5Print10printFloatEdh>
	...

000d4dfc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d4dfc:	4b01      	ldr	r3, [pc, #4]	; (d4e04 <_GLOBAL__sub_I_RGB+0x8>)
   d4dfe:	2200      	movs	r2, #0
   d4e00:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d4e02:	4770      	bx	lr
   d4e04:	2003e5c8 	.word	0x2003e5c8

000d4e08 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4e08:	b510      	push	{r4, lr}
   d4e0a:	4604      	mov	r4, r0
   d4e0c:	4608      	mov	r0, r1
{
    _spi = spi;
   d4e0e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4e10:	f7ff fb7e 	bl	d4510 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4e14:	2300      	movs	r3, #0
   d4e16:	6063      	str	r3, [r4, #4]
}
   d4e18:	4620      	mov	r0, r4
   d4e1a:	bd10      	pop	{r4, pc}

000d4e1c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4e1c:	4b05      	ldr	r3, [pc, #20]	; (d4e34 <_GLOBAL__sub_I_System+0x18>)
   d4e1e:	2202      	movs	r2, #2
   d4e20:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e22:	4b05      	ldr	r3, [pc, #20]	; (d4e38 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4e24:	4a05      	ldr	r2, [pc, #20]	; (d4e3c <_GLOBAL__sub_I_System+0x20>)
   d4e26:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4e28:	2000      	movs	r0, #0
   d4e2a:	6018      	str	r0, [r3, #0]
   d4e2c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4e2e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e30:	f7ff bbfe 	b.w	d4630 <set_system_mode>
   d4e34:	2003e5e4 	.word	0x2003e5e4
   d4e38:	2003e5d8 	.word	0x2003e5d8
   d4e3c:	ffff0000 	.word	0xffff0000

000d4e40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e40:	4b02      	ldr	r3, [pc, #8]	; (d4e4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e42:	681a      	ldr	r2, [r3, #0]
   d4e44:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e46:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4e48:	4770      	bx	lr
   d4e4a:	bf00      	nop
   d4e4c:	2003e4f4 	.word	0x2003e4f4
   d4e50:	2003e5e8 	.word	0x2003e5e8

000d4e54 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4e54:	4770      	bx	lr

000d4e56 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e56:	7441      	strb	r1, [r0, #17]
}
   d4e58:	4770      	bx	lr

000d4e5a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4e5a:	4770      	bx	lr

000d4e5c <_ZN11USARTSerial17availableForWriteEv>:
{
   d4e5c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4e5e:	7c00      	ldrb	r0, [r0, #16]
   d4e60:	f7ff fb9e 	bl	d45a0 <hal_usart_available_data_for_write>
}
   d4e64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e68:	bd08      	pop	{r3, pc}

000d4e6a <_ZN11USARTSerial9availableEv>:
{
   d4e6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4e6c:	7c00      	ldrb	r0, [r0, #16]
   d4e6e:	f7ff fb6f 	bl	d4550 <hal_usart_available>
}
   d4e72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e76:	bd08      	pop	{r3, pc}

000d4e78 <_ZN11USARTSerial4peekEv>:
{
   d4e78:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4e7a:	7c00      	ldrb	r0, [r0, #16]
   d4e7c:	f7ff fb78 	bl	d4570 <hal_usart_peek>
}
   d4e80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4e84:	bd08      	pop	{r3, pc}

000d4e86 <_ZN11USARTSerial4readEv>:
{
   d4e86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4e88:	7c00      	ldrb	r0, [r0, #16]
   d4e8a:	f7ff fb69 	bl	d4560 <hal_usart_read>
}
   d4e8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4e92:	bd08      	pop	{r3, pc}

000d4e94 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d4e94:	7c00      	ldrb	r0, [r0, #16]
   d4e96:	f7ff bb73 	b.w	d4580 <hal_usart_flush>

000d4e9a <_ZN11USARTSerial5writeEh>:
{
   d4e9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4e9c:	7c45      	ldrb	r5, [r0, #17]
{
   d4e9e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4ea0:	b12d      	cbz	r5, d4eae <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d4ea2:	7c20      	ldrb	r0, [r4, #16]
}
   d4ea4:	b003      	add	sp, #12
   d4ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4eaa:	f7ff bb49 	b.w	d4540 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4eae:	7c00      	ldrb	r0, [r0, #16]
   d4eb0:	9101      	str	r1, [sp, #4]
   d4eb2:	f7ff fb75 	bl	d45a0 <hal_usart_available_data_for_write>
   d4eb6:	2800      	cmp	r0, #0
   d4eb8:	9901      	ldr	r1, [sp, #4]
   d4eba:	dcf2      	bgt.n	d4ea2 <_ZN11USARTSerial5writeEh+0x8>
}
   d4ebc:	4628      	mov	r0, r5
   d4ebe:	b003      	add	sp, #12
   d4ec0:	bd30      	pop	{r4, r5, pc}

000d4ec2 <_ZN11USARTSerialD0Ev>:
   d4ec2:	b510      	push	{r4, lr}
   d4ec4:	2114      	movs	r1, #20
   d4ec6:	4604      	mov	r4, r0
   d4ec8:	f000 fa08 	bl	d52dc <_ZdlPvj>
   d4ecc:	4620      	mov	r0, r4
   d4ece:	bd10      	pop	{r4, pc}

000d4ed0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4ed0:	b510      	push	{r4, lr}
   d4ed2:	f04f 0c00 	mov.w	ip, #0
   d4ed6:	4604      	mov	r4, r0
   d4ed8:	4608      	mov	r0, r1
   d4eda:	4611      	mov	r1, r2
   d4edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4ee0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4ee4:	4a04      	ldr	r2, [pc, #16]	; (d4ef8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4ee6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4ee8:	2201      	movs	r2, #1
  _serial = serial;
   d4eea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4eec:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4eee:	461a      	mov	r2, r3
   d4ef0:	f7ff fb1e 	bl	d4530 <hal_usart_init>
}
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	bd10      	pop	{r4, pc}
   d4ef8:	000d5f38 	.word	0x000d5f38

000d4efc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d4efc:	7c00      	ldrb	r0, [r0, #16]
   d4efe:	2300      	movs	r3, #0
   d4f00:	f7ff bb56 	b.w	d45b0 <hal_usart_begin_config>

000d4f04 <_Z22__fetch_global_Serial1v>:
{
   d4f04:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4f06:	4c0d      	ldr	r4, [pc, #52]	; (d4f3c <_Z22__fetch_global_Serial1v+0x38>)
   d4f08:	7821      	ldrb	r1, [r4, #0]
   d4f0a:	f3bf 8f5b 	dmb	ish
   d4f0e:	f011 0101 	ands.w	r1, r1, #1
   d4f12:	d110      	bne.n	d4f36 <_Z22__fetch_global_Serial1v+0x32>
   d4f14:	4620      	mov	r0, r4
   d4f16:	9101      	str	r1, [sp, #4]
   d4f18:	f7ff f8bf 	bl	d409a <__cxa_guard_acquire>
   d4f1c:	9901      	ldr	r1, [sp, #4]
   d4f1e:	b150      	cbz	r0, d4f36 <_Z22__fetch_global_Serial1v+0x32>
   d4f20:	4b07      	ldr	r3, [pc, #28]	; (d4f40 <_Z22__fetch_global_Serial1v+0x3c>)
   d4f22:	4a08      	ldr	r2, [pc, #32]	; (d4f44 <_Z22__fetch_global_Serial1v+0x40>)
   d4f24:	4808      	ldr	r0, [pc, #32]	; (d4f48 <_Z22__fetch_global_Serial1v+0x44>)
   d4f26:	f7ff ffd3 	bl	d4ed0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4f2a:	4620      	mov	r0, r4
   d4f2c:	f7ff f8ba 	bl	d40a4 <__cxa_guard_release>
   d4f30:	4806      	ldr	r0, [pc, #24]	; (d4f4c <_Z22__fetch_global_Serial1v+0x48>)
   d4f32:	f000 fe8b 	bl	d5c4c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4f36:	4804      	ldr	r0, [pc, #16]	; (d4f48 <_Z22__fetch_global_Serial1v+0x44>)
   d4f38:	b002      	add	sp, #8
   d4f3a:	bd10      	pop	{r4, pc}
   d4f3c:	2003e5ec 	.word	0x2003e5ec
   d4f40:	2003e674 	.word	0x2003e674
   d4f44:	2003e5f0 	.word	0x2003e5f0
   d4f48:	2003e6f8 	.word	0x2003e6f8
   d4f4c:	000d4e5b 	.word	0x000d4e5b

000d4f50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4f50:	7441      	strb	r1, [r0, #17]
}
   d4f52:	4770      	bx	lr

000d4f54 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f54:	4770      	bx	lr

000d4f56 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4f56:	4770      	bx	lr

000d4f58 <_ZN9USBSerial4readEv>:
{
   d4f58:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4f5a:	2100      	movs	r1, #0
   d4f5c:	7c00      	ldrb	r0, [r0, #16]
   d4f5e:	f7ff fb4f 	bl	d4600 <HAL_USB_USART_Receive_Data>
}
   d4f62:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4f66:	bd08      	pop	{r3, pc}

000d4f68 <_ZN9USBSerial4peekEv>:
{
   d4f68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4f6a:	2101      	movs	r1, #1
   d4f6c:	7c00      	ldrb	r0, [r0, #16]
   d4f6e:	f7ff fb47 	bl	d4600 <HAL_USB_USART_Receive_Data>
}
   d4f72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4f76:	bd08      	pop	{r3, pc}

000d4f78 <_ZN9USBSerial17availableForWriteEv>:
{
   d4f78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4f7a:	7c00      	ldrb	r0, [r0, #16]
   d4f7c:	f7ff fb38 	bl	d45f0 <HAL_USB_USART_Available_Data_For_Write>
}
   d4f80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f84:	bd08      	pop	{r3, pc}

000d4f86 <_ZN9USBSerial9availableEv>:
{
   d4f86:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4f88:	7c00      	ldrb	r0, [r0, #16]
   d4f8a:	f7ff fb29 	bl	d45e0 <HAL_USB_USART_Available_Data>
}
   d4f8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f92:	bd08      	pop	{r3, pc}

000d4f94 <_ZN9USBSerial5writeEh>:
{
   d4f94:	b513      	push	{r0, r1, r4, lr}
   d4f96:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f98:	7c00      	ldrb	r0, [r0, #16]
{
   d4f9a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f9c:	f7ff fb28 	bl	d45f0 <HAL_USB_USART_Available_Data_For_Write>
   d4fa0:	2800      	cmp	r0, #0
   d4fa2:	9901      	ldr	r1, [sp, #4]
   d4fa4:	dc01      	bgt.n	d4faa <_ZN9USBSerial5writeEh+0x16>
   d4fa6:	7c60      	ldrb	r0, [r4, #17]
   d4fa8:	b120      	cbz	r0, d4fb4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4faa:	7c20      	ldrb	r0, [r4, #16]
   d4fac:	f7ff fb30 	bl	d4610 <HAL_USB_USART_Send_Data>
   d4fb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4fb4:	b002      	add	sp, #8
   d4fb6:	bd10      	pop	{r4, pc}

000d4fb8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4fb8:	7c00      	ldrb	r0, [r0, #16]
   d4fba:	f7ff bb31 	b.w	d4620 <HAL_USB_USART_Flush_Data>

000d4fbe <_ZN9USBSerialD0Ev>:
   d4fbe:	b510      	push	{r4, lr}
   d4fc0:	2114      	movs	r1, #20
   d4fc2:	4604      	mov	r4, r0
   d4fc4:	f000 f98a 	bl	d52dc <_ZdlPvj>
   d4fc8:	4620      	mov	r0, r4
   d4fca:	bd10      	pop	{r4, pc}

000d4fcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4fcc:	b510      	push	{r4, lr}
   d4fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4fd2:	4604      	mov	r4, r0
   d4fd4:	4608      	mov	r0, r1
   d4fd6:	2100      	movs	r1, #0
   d4fd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4fdc:	4b04      	ldr	r3, [pc, #16]	; (d4ff0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4fde:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4fe0:	2301      	movs	r3, #1
  _serial = serial;
   d4fe2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4fe4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4fe6:	4611      	mov	r1, r2
   d4fe8:	f7ff faea 	bl	d45c0 <HAL_USB_USART_Init>
}
   d4fec:	4620      	mov	r0, r4
   d4fee:	bd10      	pop	{r4, pc}
   d4ff0:	000d5f68 	.word	0x000d5f68

000d4ff4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4ff4:	7c00      	ldrb	r0, [r0, #16]
   d4ff6:	2200      	movs	r2, #0
   d4ff8:	f7ff baea 	b.w	d45d0 <HAL_USB_USART_Begin>

000d4ffc <_Z19acquireSerialBufferv>:
{
   d4ffc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4ffe:	2214      	movs	r2, #20
{
   d5000:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5002:	2100      	movs	r1, #0
   d5004:	f000 fe36 	bl	d5c74 <memset>
}
   d5008:	4620      	mov	r0, r4
   d500a:	bd10      	pop	{r4, pc}

000d500c <_Z16_fetch_usbserialv>:
{
   d500c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d500e:	4c0f      	ldr	r4, [pc, #60]	; (d504c <_Z16_fetch_usbserialv+0x40>)
{
   d5010:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5012:	a803      	add	r0, sp, #12
   d5014:	f7ff fff2 	bl	d4ffc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5018:	7821      	ldrb	r1, [r4, #0]
   d501a:	f3bf 8f5b 	dmb	ish
   d501e:	f011 0101 	ands.w	r1, r1, #1
   d5022:	d10f      	bne.n	d5044 <_Z16_fetch_usbserialv+0x38>
   d5024:	4620      	mov	r0, r4
   d5026:	9101      	str	r1, [sp, #4]
   d5028:	f7ff f837 	bl	d409a <__cxa_guard_acquire>
   d502c:	9901      	ldr	r1, [sp, #4]
   d502e:	b148      	cbz	r0, d5044 <_Z16_fetch_usbserialv+0x38>
   d5030:	aa03      	add	r2, sp, #12
   d5032:	4807      	ldr	r0, [pc, #28]	; (d5050 <_Z16_fetch_usbserialv+0x44>)
   d5034:	f7ff ffca 	bl	d4fcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5038:	4620      	mov	r0, r4
   d503a:	f7ff f833 	bl	d40a4 <__cxa_guard_release>
   d503e:	4805      	ldr	r0, [pc, #20]	; (d5054 <_Z16_fetch_usbserialv+0x48>)
   d5040:	f000 fe04 	bl	d5c4c <atexit>
	return _usbserial;
}
   d5044:	4802      	ldr	r0, [pc, #8]	; (d5050 <_Z16_fetch_usbserialv+0x44>)
   d5046:	b008      	add	sp, #32
   d5048:	bd10      	pop	{r4, pc}
   d504a:	bf00      	nop
   d504c:	2003e70c 	.word	0x2003e70c
   d5050:	2003e710 	.word	0x2003e710
   d5054:	000d4f55 	.word	0x000d4f55

000d5058 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5058:	4b01      	ldr	r3, [pc, #4]	; (d5060 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d505a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d505c:	4770      	bx	lr
   d505e:	bf00      	nop
   d5060:	2003e4f8 	.word	0x2003e4f8

000d5064 <serialEventRun>:
{
   d5064:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5066:	4b0b      	ldr	r3, [pc, #44]	; (d5094 <serialEventRun+0x30>)
   d5068:	b143      	cbz	r3, d507c <serialEventRun+0x18>
   d506a:	f7ff ffcf 	bl	d500c <_Z16_fetch_usbserialv>
   d506e:	6803      	ldr	r3, [r0, #0]
   d5070:	691b      	ldr	r3, [r3, #16]
   d5072:	4798      	blx	r3
   d5074:	2800      	cmp	r0, #0
   d5076:	dd01      	ble.n	d507c <serialEventRun+0x18>
        serialEvent();
   d5078:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d507c:	4b06      	ldr	r3, [pc, #24]	; (d5098 <serialEventRun+0x34>)
   d507e:	b143      	cbz	r3, d5092 <serialEventRun+0x2e>
   d5080:	f7ff ff40 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d5084:	6803      	ldr	r3, [r0, #0]
   d5086:	691b      	ldr	r3, [r3, #16]
   d5088:	4798      	blx	r3
   d508a:	2800      	cmp	r0, #0
   d508c:	dd01      	ble.n	d5092 <serialEventRun+0x2e>
        serialEvent1();
   d508e:	f3af 8000 	nop.w
}
   d5092:	bd08      	pop	{r3, pc}
	...

000d509c <_post_loop>:
{
   d509c:	b508      	push	{r3, lr}
	serialEventRun();
   d509e:	f7ff ffe1 	bl	d5064 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d50a2:	f7ff f9c5 	bl	d4430 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d50a6:	4b01      	ldr	r3, [pc, #4]	; (d50ac <_post_loop+0x10>)
   d50a8:	6018      	str	r0, [r3, #0]
}
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	2003e738 	.word	0x2003e738

000d50b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d50b0:	4805      	ldr	r0, [pc, #20]	; (d50c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   d50b2:	4a06      	ldr	r2, [pc, #24]	; (d50cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   d50b4:	4906      	ldr	r1, [pc, #24]	; (d50d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d50b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d50b8:	1a12      	subs	r2, r2, r0
   d50ba:	f000 fdcd 	bl	d5c58 <memcpy>
    __backup_sram_signature = signature;
   d50be:	4b05      	ldr	r3, [pc, #20]	; (d50d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   d50c0:	4a05      	ldr	r2, [pc, #20]	; (d50d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   d50c2:	601a      	str	r2, [r3, #0]
}
   d50c4:	bd08      	pop	{r3, pc}
   d50c6:	bf00      	nop
   d50c8:	2003f400 	.word	0x2003f400
   d50cc:	2003f404 	.word	0x2003f404
   d50d0:	000d5fc0 	.word	0x000d5fc0
   d50d4:	2003f400 	.word	0x2003f400
   d50d8:	9a271c1e 	.word	0x9a271c1e

000d50dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d50dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d50de:	2300      	movs	r3, #0
   d50e0:	9300      	str	r3, [sp, #0]
   d50e2:	461a      	mov	r2, r3
   d50e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d50e8:	f7ff fabc 	bl	d4664 <system_ctrl_set_result>
}
   d50ec:	b003      	add	sp, #12
   d50ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d50f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d50f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d50f6:	8843      	ldrh	r3, [r0, #2]
   d50f8:	2b0a      	cmp	r3, #10
   d50fa:	d008      	beq.n	d510e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d50fc:	2b50      	cmp	r3, #80	; 0x50
   d50fe:	d10b      	bne.n	d5118 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5100:	4b09      	ldr	r3, [pc, #36]	; (d5128 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5102:	681b      	ldr	r3, [r3, #0]
   d5104:	b14b      	cbz	r3, d511a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5106:	b003      	add	sp, #12
   d5108:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d510c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d510e:	f7ff ffe5 	bl	d50dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5112:	b003      	add	sp, #12
   d5114:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5118:	2300      	movs	r3, #0
   d511a:	9300      	str	r3, [sp, #0]
   d511c:	461a      	mov	r2, r3
   d511e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5122:	f7ff fa9f 	bl	d4664 <system_ctrl_set_result>
}
   d5126:	e7f4      	b.n	d5112 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5128:	2003e728 	.word	0x2003e728

000d512c <module_user_init_hook>:
{
   d512c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d512e:	4812      	ldr	r0, [pc, #72]	; (d5178 <module_user_init_hook+0x4c>)
   d5130:	2100      	movs	r1, #0
   d5132:	f7ff fb21 	bl	d4778 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d5136:	4b11      	ldr	r3, [pc, #68]	; (d517c <module_user_init_hook+0x50>)
   d5138:	681a      	ldr	r2, [r3, #0]
   d513a:	4b11      	ldr	r3, [pc, #68]	; (d5180 <module_user_init_hook+0x54>)
   d513c:	429a      	cmp	r2, r3
   d513e:	4b11      	ldr	r3, [pc, #68]	; (d5184 <module_user_init_hook+0x58>)
   d5140:	bf0c      	ite	eq
   d5142:	2201      	moveq	r2, #1
   d5144:	2200      	movne	r2, #0
   d5146:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5148:	d001      	beq.n	d514e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d514a:	f7ff ffb1 	bl	d50b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d514e:	f7ff f967 	bl	d4420 <HAL_RNG_GetRandomNumber>
   d5152:	4604      	mov	r4, r0
    srand(seed);
   d5154:	f000 fd96 	bl	d5c84 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5158:	4b0b      	ldr	r3, [pc, #44]	; (d5188 <module_user_init_hook+0x5c>)
   d515a:	b113      	cbz	r3, d5162 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d515c:	4620      	mov	r0, r4
   d515e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5162:	2100      	movs	r1, #0
   d5164:	4808      	ldr	r0, [pc, #32]	; (d5188 <module_user_init_hook+0x5c>)
   d5166:	f7ff fa87 	bl	d4678 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d516a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d516e:	4807      	ldr	r0, [pc, #28]	; (d518c <module_user_init_hook+0x60>)
   d5170:	2100      	movs	r1, #0
   d5172:	f7ff ba6d 	b.w	d4650 <system_ctrl_set_app_request_handler>
   d5176:	bf00      	nop
   d5178:	000d5059 	.word	0x000d5059
   d517c:	2003f400 	.word	0x2003f400
   d5180:	9a271c1e 	.word	0x9a271c1e
   d5184:	2003e724 	.word	0x2003e724
   d5188:	00000000 	.word	0x00000000
   d518c:	000d50f5 	.word	0x000d50f5

000d5190 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5190:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5192:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5194:	d902      	bls.n	d519c <pinAvailable+0xc>
    return false;
   d5196:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5198:	b002      	add	sp, #8
   d519a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d519c:	f1a0 030b 	sub.w	r3, r0, #11
   d51a0:	2b02      	cmp	r3, #2
   d51a2:	d81a      	bhi.n	d51da <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d51a4:	4c17      	ldr	r4, [pc, #92]	; (d5204 <pinAvailable+0x74>)
   d51a6:	7821      	ldrb	r1, [r4, #0]
   d51a8:	f3bf 8f5b 	dmb	ish
   d51ac:	f011 0101 	ands.w	r1, r1, #1
   d51b0:	d10b      	bne.n	d51ca <pinAvailable+0x3a>
   d51b2:	4620      	mov	r0, r4
   d51b4:	9101      	str	r1, [sp, #4]
   d51b6:	f7fe ff70 	bl	d409a <__cxa_guard_acquire>
   d51ba:	9901      	ldr	r1, [sp, #4]
   d51bc:	b128      	cbz	r0, d51ca <pinAvailable+0x3a>
   d51be:	4812      	ldr	r0, [pc, #72]	; (d5208 <pinAvailable+0x78>)
   d51c0:	f7ff fe22 	bl	d4e08 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d51c4:	4620      	mov	r0, r4
   d51c6:	f7fe ff6d 	bl	d40a4 <__cxa_guard_release>
   d51ca:	4b0f      	ldr	r3, [pc, #60]	; (d5208 <pinAvailable+0x78>)
   d51cc:	7818      	ldrb	r0, [r3, #0]
   d51ce:	f7ff f9a7 	bl	d4520 <hal_spi_is_enabled>
   d51d2:	2800      	cmp	r0, #0
   d51d4:	d1df      	bne.n	d5196 <pinAvailable+0x6>
  return true; // 'pin' is available
   d51d6:	2001      	movs	r0, #1
   d51d8:	e7de      	b.n	d5198 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d51da:	2801      	cmp	r0, #1
   d51dc:	d809      	bhi.n	d51f2 <pinAvailable+0x62>
   d51de:	f000 f859 	bl	d5294 <_Z19__fetch_global_Wirev>
   d51e2:	2100      	movs	r1, #0
   d51e4:	7c00      	ldrb	r0, [r0, #16]
   d51e6:	f7ff f96b 	bl	d44c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d51ea:	f080 0001 	eor.w	r0, r0, #1
   d51ee:	b2c0      	uxtb	r0, r0
   d51f0:	e7d2      	b.n	d5198 <pinAvailable+0x8>
   d51f2:	3809      	subs	r0, #9
   d51f4:	2801      	cmp	r0, #1
   d51f6:	d8ee      	bhi.n	d51d6 <pinAvailable+0x46>
   d51f8:	f7ff fe84 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d51fc:	7c00      	ldrb	r0, [r0, #16]
   d51fe:	f7ff f9c7 	bl	d4590 <hal_usart_is_enabled>
   d5202:	e7f2      	b.n	d51ea <pinAvailable+0x5a>
   d5204:	2003e72c 	.word	0x2003e72c
   d5208:	2003e730 	.word	0x2003e730

000d520c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d520c:	2823      	cmp	r0, #35	; 0x23
{
   d520e:	b538      	push	{r3, r4, r5, lr}
   d5210:	4604      	mov	r4, r0
   d5212:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5214:	d80a      	bhi.n	d522c <pinMode+0x20>
   d5216:	29ff      	cmp	r1, #255	; 0xff
   d5218:	d008      	beq.n	d522c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d521a:	f7ff ffb9 	bl	d5190 <pinAvailable>
   d521e:	b128      	cbz	r0, d522c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5220:	4629      	mov	r1, r5
   d5222:	4620      	mov	r0, r4
}
   d5224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5228:	f7ff b90a 	b.w	d4440 <HAL_Pin_Mode>
}
   d522c:	bd38      	pop	{r3, r4, r5, pc}

000d522e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d522e:	b538      	push	{r3, r4, r5, lr}
   d5230:	4604      	mov	r4, r0
   d5232:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5234:	f7ff f90c 	bl	d4450 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5238:	28ff      	cmp	r0, #255	; 0xff
   d523a:	d010      	beq.n	d525e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d523c:	2806      	cmp	r0, #6
   d523e:	d804      	bhi.n	d524a <digitalWrite+0x1c>
   d5240:	234d      	movs	r3, #77	; 0x4d
   d5242:	fa23 f000 	lsr.w	r0, r3, r0
   d5246:	07c3      	lsls	r3, r0, #31
   d5248:	d409      	bmi.n	d525e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d524a:	4620      	mov	r0, r4
   d524c:	f7ff ffa0 	bl	d5190 <pinAvailable>
   d5250:	b128      	cbz	r0, d525e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5252:	4629      	mov	r1, r5
   d5254:	4620      	mov	r0, r4
}
   d5256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d525a:	f7ff b901 	b.w	d4460 <HAL_GPIO_Write>
}
   d525e:	bd38      	pop	{r3, r4, r5, pc}

000d5260 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5260:	4770      	bx	lr
	...

000d5264 <_Z17acquireWireBufferv>:
{
   d5264:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5266:	2300      	movs	r3, #0
   d5268:	2520      	movs	r5, #32
   d526a:	8043      	strh	r3, [r0, #2]
   d526c:	2314      	movs	r3, #20
{
   d526e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5270:	8003      	strh	r3, [r0, #0]
   d5272:	6085      	str	r5, [r0, #8]
   d5274:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5276:	4906      	ldr	r1, [pc, #24]	; (d5290 <_Z17acquireWireBufferv+0x2c>)
   d5278:	4628      	mov	r0, r5
   d527a:	f000 f831 	bl	d52e0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d527e:	4904      	ldr	r1, [pc, #16]	; (d5290 <_Z17acquireWireBufferv+0x2c>)
	};
   d5280:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5282:	4628      	mov	r0, r5
   d5284:	f000 f82c 	bl	d52e0 <_ZnajRKSt9nothrow_t>
	};
   d5288:	60e0      	str	r0, [r4, #12]
}
   d528a:	4620      	mov	r0, r4
   d528c:	bd38      	pop	{r3, r4, r5, pc}
   d528e:	bf00      	nop
   d5290:	000d5f90 	.word	0x000d5f90

000d5294 <_Z19__fetch_global_Wirev>:
{
   d5294:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5296:	4d0e      	ldr	r5, [pc, #56]	; (d52d0 <_Z19__fetch_global_Wirev+0x3c>)
   d5298:	7829      	ldrb	r1, [r5, #0]
   d529a:	f3bf 8f5b 	dmb	ish
   d529e:	f011 0401 	ands.w	r4, r1, #1
{
   d52a2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d52a4:	d111      	bne.n	d52ca <_Z19__fetch_global_Wirev+0x36>
   d52a6:	4628      	mov	r0, r5
   d52a8:	f7fe fef7 	bl	d409a <__cxa_guard_acquire>
   d52ac:	b168      	cbz	r0, d52ca <_Z19__fetch_global_Wirev+0x36>
   d52ae:	a801      	add	r0, sp, #4
   d52b0:	f7ff ffd8 	bl	d5264 <_Z17acquireWireBufferv>
   d52b4:	aa01      	add	r2, sp, #4
   d52b6:	4621      	mov	r1, r4
   d52b8:	4806      	ldr	r0, [pc, #24]	; (d52d4 <_Z19__fetch_global_Wirev+0x40>)
   d52ba:	f7ff fb27 	bl	d490c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d52be:	4628      	mov	r0, r5
   d52c0:	f7fe fef0 	bl	d40a4 <__cxa_guard_release>
   d52c4:	4804      	ldr	r0, [pc, #16]	; (d52d8 <_Z19__fetch_global_Wirev+0x44>)
   d52c6:	f000 fcc1 	bl	d5c4c <atexit>
	return wire;
}
   d52ca:	4802      	ldr	r0, [pc, #8]	; (d52d4 <_Z19__fetch_global_Wirev+0x40>)
   d52cc:	b007      	add	sp, #28
   d52ce:	bd30      	pop	{r4, r5, pc}
   d52d0:	2003e73c 	.word	0x2003e73c
   d52d4:	2003e740 	.word	0x2003e740
   d52d8:	000d5261 	.word	0x000d5261

000d52dc <_ZdlPvj>:
   d52dc:	f7fe bedb 	b.w	d4096 <_ZdlPv>

000d52e0 <_ZnajRKSt9nothrow_t>:
   d52e0:	f7fe bed7 	b.w	d4092 <_Znaj>

000d52e4 <__aeabi_drsub>:
   d52e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d52e8:	e002      	b.n	d52f0 <__adddf3>
   d52ea:	bf00      	nop

000d52ec <__aeabi_dsub>:
   d52ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d52f0 <__adddf3>:
   d52f0:	b530      	push	{r4, r5, lr}
   d52f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d52f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d52fa:	ea94 0f05 	teq	r4, r5
   d52fe:	bf08      	it	eq
   d5300:	ea90 0f02 	teqeq	r0, r2
   d5304:	bf1f      	itttt	ne
   d5306:	ea54 0c00 	orrsne.w	ip, r4, r0
   d530a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d530e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5316:	f000 80e2 	beq.w	d54de <__adddf3+0x1ee>
   d531a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d531e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5322:	bfb8      	it	lt
   d5324:	426d      	neglt	r5, r5
   d5326:	dd0c      	ble.n	d5342 <__adddf3+0x52>
   d5328:	442c      	add	r4, r5
   d532a:	ea80 0202 	eor.w	r2, r0, r2
   d532e:	ea81 0303 	eor.w	r3, r1, r3
   d5332:	ea82 0000 	eor.w	r0, r2, r0
   d5336:	ea83 0101 	eor.w	r1, r3, r1
   d533a:	ea80 0202 	eor.w	r2, r0, r2
   d533e:	ea81 0303 	eor.w	r3, r1, r3
   d5342:	2d36      	cmp	r5, #54	; 0x36
   d5344:	bf88      	it	hi
   d5346:	bd30      	pophi	{r4, r5, pc}
   d5348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d534c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5358:	d002      	beq.n	d5360 <__adddf3+0x70>
   d535a:	4240      	negs	r0, r0
   d535c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5364:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d536c:	d002      	beq.n	d5374 <__adddf3+0x84>
   d536e:	4252      	negs	r2, r2
   d5370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5374:	ea94 0f05 	teq	r4, r5
   d5378:	f000 80a7 	beq.w	d54ca <__adddf3+0x1da>
   d537c:	f1a4 0401 	sub.w	r4, r4, #1
   d5380:	f1d5 0e20 	rsbs	lr, r5, #32
   d5384:	db0d      	blt.n	d53a2 <__adddf3+0xb2>
   d5386:	fa02 fc0e 	lsl.w	ip, r2, lr
   d538a:	fa22 f205 	lsr.w	r2, r2, r5
   d538e:	1880      	adds	r0, r0, r2
   d5390:	f141 0100 	adc.w	r1, r1, #0
   d5394:	fa03 f20e 	lsl.w	r2, r3, lr
   d5398:	1880      	adds	r0, r0, r2
   d539a:	fa43 f305 	asr.w	r3, r3, r5
   d539e:	4159      	adcs	r1, r3
   d53a0:	e00e      	b.n	d53c0 <__adddf3+0xd0>
   d53a2:	f1a5 0520 	sub.w	r5, r5, #32
   d53a6:	f10e 0e20 	add.w	lr, lr, #32
   d53aa:	2a01      	cmp	r2, #1
   d53ac:	fa03 fc0e 	lsl.w	ip, r3, lr
   d53b0:	bf28      	it	cs
   d53b2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d53b6:	fa43 f305 	asr.w	r3, r3, r5
   d53ba:	18c0      	adds	r0, r0, r3
   d53bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d53c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d53c4:	d507      	bpl.n	d53d6 <__adddf3+0xe6>
   d53c6:	f04f 0e00 	mov.w	lr, #0
   d53ca:	f1dc 0c00 	rsbs	ip, ip, #0
   d53ce:	eb7e 0000 	sbcs.w	r0, lr, r0
   d53d2:	eb6e 0101 	sbc.w	r1, lr, r1
   d53d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d53da:	d31b      	bcc.n	d5414 <__adddf3+0x124>
   d53dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d53e0:	d30c      	bcc.n	d53fc <__adddf3+0x10c>
   d53e2:	0849      	lsrs	r1, r1, #1
   d53e4:	ea5f 0030 	movs.w	r0, r0, rrx
   d53e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d53ec:	f104 0401 	add.w	r4, r4, #1
   d53f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d53f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d53f8:	f080 809a 	bcs.w	d5530 <__adddf3+0x240>
   d53fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5400:	bf08      	it	eq
   d5402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5406:	f150 0000 	adcs.w	r0, r0, #0
   d540a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d540e:	ea41 0105 	orr.w	r1, r1, r5
   d5412:	bd30      	pop	{r4, r5, pc}
   d5414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5418:	4140      	adcs	r0, r0
   d541a:	eb41 0101 	adc.w	r1, r1, r1
   d541e:	3c01      	subs	r4, #1
   d5420:	bf28      	it	cs
   d5422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5426:	d2e9      	bcs.n	d53fc <__adddf3+0x10c>
   d5428:	f091 0f00 	teq	r1, #0
   d542c:	bf04      	itt	eq
   d542e:	4601      	moveq	r1, r0
   d5430:	2000      	moveq	r0, #0
   d5432:	fab1 f381 	clz	r3, r1
   d5436:	bf08      	it	eq
   d5438:	3320      	addeq	r3, #32
   d543a:	f1a3 030b 	sub.w	r3, r3, #11
   d543e:	f1b3 0220 	subs.w	r2, r3, #32
   d5442:	da0c      	bge.n	d545e <__adddf3+0x16e>
   d5444:	320c      	adds	r2, #12
   d5446:	dd08      	ble.n	d545a <__adddf3+0x16a>
   d5448:	f102 0c14 	add.w	ip, r2, #20
   d544c:	f1c2 020c 	rsb	r2, r2, #12
   d5450:	fa01 f00c 	lsl.w	r0, r1, ip
   d5454:	fa21 f102 	lsr.w	r1, r1, r2
   d5458:	e00c      	b.n	d5474 <__adddf3+0x184>
   d545a:	f102 0214 	add.w	r2, r2, #20
   d545e:	bfd8      	it	le
   d5460:	f1c2 0c20 	rsble	ip, r2, #32
   d5464:	fa01 f102 	lsl.w	r1, r1, r2
   d5468:	fa20 fc0c 	lsr.w	ip, r0, ip
   d546c:	bfdc      	itt	le
   d546e:	ea41 010c 	orrle.w	r1, r1, ip
   d5472:	4090      	lslle	r0, r2
   d5474:	1ae4      	subs	r4, r4, r3
   d5476:	bfa2      	ittt	ge
   d5478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d547c:	4329      	orrge	r1, r5
   d547e:	bd30      	popge	{r4, r5, pc}
   d5480:	ea6f 0404 	mvn.w	r4, r4
   d5484:	3c1f      	subs	r4, #31
   d5486:	da1c      	bge.n	d54c2 <__adddf3+0x1d2>
   d5488:	340c      	adds	r4, #12
   d548a:	dc0e      	bgt.n	d54aa <__adddf3+0x1ba>
   d548c:	f104 0414 	add.w	r4, r4, #20
   d5490:	f1c4 0220 	rsb	r2, r4, #32
   d5494:	fa20 f004 	lsr.w	r0, r0, r4
   d5498:	fa01 f302 	lsl.w	r3, r1, r2
   d549c:	ea40 0003 	orr.w	r0, r0, r3
   d54a0:	fa21 f304 	lsr.w	r3, r1, r4
   d54a4:	ea45 0103 	orr.w	r1, r5, r3
   d54a8:	bd30      	pop	{r4, r5, pc}
   d54aa:	f1c4 040c 	rsb	r4, r4, #12
   d54ae:	f1c4 0220 	rsb	r2, r4, #32
   d54b2:	fa20 f002 	lsr.w	r0, r0, r2
   d54b6:	fa01 f304 	lsl.w	r3, r1, r4
   d54ba:	ea40 0003 	orr.w	r0, r0, r3
   d54be:	4629      	mov	r1, r5
   d54c0:	bd30      	pop	{r4, r5, pc}
   d54c2:	fa21 f004 	lsr.w	r0, r1, r4
   d54c6:	4629      	mov	r1, r5
   d54c8:	bd30      	pop	{r4, r5, pc}
   d54ca:	f094 0f00 	teq	r4, #0
   d54ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d54d2:	bf06      	itte	eq
   d54d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d54d8:	3401      	addeq	r4, #1
   d54da:	3d01      	subne	r5, #1
   d54dc:	e74e      	b.n	d537c <__adddf3+0x8c>
   d54de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d54e2:	bf18      	it	ne
   d54e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d54e8:	d029      	beq.n	d553e <__adddf3+0x24e>
   d54ea:	ea94 0f05 	teq	r4, r5
   d54ee:	bf08      	it	eq
   d54f0:	ea90 0f02 	teqeq	r0, r2
   d54f4:	d005      	beq.n	d5502 <__adddf3+0x212>
   d54f6:	ea54 0c00 	orrs.w	ip, r4, r0
   d54fa:	bf04      	itt	eq
   d54fc:	4619      	moveq	r1, r3
   d54fe:	4610      	moveq	r0, r2
   d5500:	bd30      	pop	{r4, r5, pc}
   d5502:	ea91 0f03 	teq	r1, r3
   d5506:	bf1e      	ittt	ne
   d5508:	2100      	movne	r1, #0
   d550a:	2000      	movne	r0, #0
   d550c:	bd30      	popne	{r4, r5, pc}
   d550e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5512:	d105      	bne.n	d5520 <__adddf3+0x230>
   d5514:	0040      	lsls	r0, r0, #1
   d5516:	4149      	adcs	r1, r1
   d5518:	bf28      	it	cs
   d551a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d551e:	bd30      	pop	{r4, r5, pc}
   d5520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5524:	bf3c      	itt	cc
   d5526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d552a:	bd30      	popcc	{r4, r5, pc}
   d552c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5538:	f04f 0000 	mov.w	r0, #0
   d553c:	bd30      	pop	{r4, r5, pc}
   d553e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5542:	bf1a      	itte	ne
   d5544:	4619      	movne	r1, r3
   d5546:	4610      	movne	r0, r2
   d5548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d554c:	bf1c      	itt	ne
   d554e:	460b      	movne	r3, r1
   d5550:	4602      	movne	r2, r0
   d5552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5556:	bf06      	itte	eq
   d5558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d555c:	ea91 0f03 	teqeq	r1, r3
   d5560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5564:	bd30      	pop	{r4, r5, pc}
   d5566:	bf00      	nop

000d5568 <__aeabi_ui2d>:
   d5568:	f090 0f00 	teq	r0, #0
   d556c:	bf04      	itt	eq
   d556e:	2100      	moveq	r1, #0
   d5570:	4770      	bxeq	lr
   d5572:	b530      	push	{r4, r5, lr}
   d5574:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5578:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d557c:	f04f 0500 	mov.w	r5, #0
   d5580:	f04f 0100 	mov.w	r1, #0
   d5584:	e750      	b.n	d5428 <__adddf3+0x138>
   d5586:	bf00      	nop

000d5588 <__aeabi_i2d>:
   d5588:	f090 0f00 	teq	r0, #0
   d558c:	bf04      	itt	eq
   d558e:	2100      	moveq	r1, #0
   d5590:	4770      	bxeq	lr
   d5592:	b530      	push	{r4, r5, lr}
   d5594:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5598:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d559c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d55a0:	bf48      	it	mi
   d55a2:	4240      	negmi	r0, r0
   d55a4:	f04f 0100 	mov.w	r1, #0
   d55a8:	e73e      	b.n	d5428 <__adddf3+0x138>
   d55aa:	bf00      	nop

000d55ac <__aeabi_f2d>:
   d55ac:	0042      	lsls	r2, r0, #1
   d55ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d55b2:	ea4f 0131 	mov.w	r1, r1, rrx
   d55b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d55ba:	bf1f      	itttt	ne
   d55bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d55c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d55c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d55c8:	4770      	bxne	lr
   d55ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d55ce:	bf08      	it	eq
   d55d0:	4770      	bxeq	lr
   d55d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d55d6:	bf04      	itt	eq
   d55d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d55dc:	4770      	bxeq	lr
   d55de:	b530      	push	{r4, r5, lr}
   d55e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d55e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d55e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d55ec:	e71c      	b.n	d5428 <__adddf3+0x138>
   d55ee:	bf00      	nop

000d55f0 <__aeabi_ul2d>:
   d55f0:	ea50 0201 	orrs.w	r2, r0, r1
   d55f4:	bf08      	it	eq
   d55f6:	4770      	bxeq	lr
   d55f8:	b530      	push	{r4, r5, lr}
   d55fa:	f04f 0500 	mov.w	r5, #0
   d55fe:	e00a      	b.n	d5616 <__aeabi_l2d+0x16>

000d5600 <__aeabi_l2d>:
   d5600:	ea50 0201 	orrs.w	r2, r0, r1
   d5604:	bf08      	it	eq
   d5606:	4770      	bxeq	lr
   d5608:	b530      	push	{r4, r5, lr}
   d560a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d560e:	d502      	bpl.n	d5616 <__aeabi_l2d+0x16>
   d5610:	4240      	negs	r0, r0
   d5612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5616:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d561a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d561e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5622:	f43f aed8 	beq.w	d53d6 <__adddf3+0xe6>
   d5626:	f04f 0203 	mov.w	r2, #3
   d562a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d562e:	bf18      	it	ne
   d5630:	3203      	addne	r2, #3
   d5632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5636:	bf18      	it	ne
   d5638:	3203      	addne	r2, #3
   d563a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d563e:	f1c2 0320 	rsb	r3, r2, #32
   d5642:	fa00 fc03 	lsl.w	ip, r0, r3
   d5646:	fa20 f002 	lsr.w	r0, r0, r2
   d564a:	fa01 fe03 	lsl.w	lr, r1, r3
   d564e:	ea40 000e 	orr.w	r0, r0, lr
   d5652:	fa21 f102 	lsr.w	r1, r1, r2
   d5656:	4414      	add	r4, r2
   d5658:	e6bd      	b.n	d53d6 <__adddf3+0xe6>
   d565a:	bf00      	nop

000d565c <__aeabi_dmul>:
   d565c:	b570      	push	{r4, r5, r6, lr}
   d565e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d566a:	bf1d      	ittte	ne
   d566c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5670:	ea94 0f0c 	teqne	r4, ip
   d5674:	ea95 0f0c 	teqne	r5, ip
   d5678:	f000 f8de 	bleq	d5838 <__aeabi_dmul+0x1dc>
   d567c:	442c      	add	r4, r5
   d567e:	ea81 0603 	eor.w	r6, r1, r3
   d5682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d568a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d568e:	bf18      	it	ne
   d5690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d569c:	d038      	beq.n	d5710 <__aeabi_dmul+0xb4>
   d569e:	fba0 ce02 	umull	ip, lr, r0, r2
   d56a2:	f04f 0500 	mov.w	r5, #0
   d56a6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d56aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d56ae:	fbe0 e503 	umlal	lr, r5, r0, r3
   d56b2:	f04f 0600 	mov.w	r6, #0
   d56b6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d56ba:	f09c 0f00 	teq	ip, #0
   d56be:	bf18      	it	ne
   d56c0:	f04e 0e01 	orrne.w	lr, lr, #1
   d56c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d56c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d56cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d56d0:	d204      	bcs.n	d56dc <__aeabi_dmul+0x80>
   d56d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d56d6:	416d      	adcs	r5, r5
   d56d8:	eb46 0606 	adc.w	r6, r6, r6
   d56dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d56e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d56e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d56e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d56ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d56f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d56f4:	bf88      	it	hi
   d56f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d56fa:	d81e      	bhi.n	d573a <__aeabi_dmul+0xde>
   d56fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5700:	bf08      	it	eq
   d5702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5706:	f150 0000 	adcs.w	r0, r0, #0
   d570a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d570e:	bd70      	pop	{r4, r5, r6, pc}
   d5710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5714:	ea46 0101 	orr.w	r1, r6, r1
   d5718:	ea40 0002 	orr.w	r0, r0, r2
   d571c:	ea81 0103 	eor.w	r1, r1, r3
   d5720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5724:	bfc2      	ittt	gt
   d5726:	ebd4 050c 	rsbsgt	r5, r4, ip
   d572a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d572e:	bd70      	popgt	{r4, r5, r6, pc}
   d5730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5734:	f04f 0e00 	mov.w	lr, #0
   d5738:	3c01      	subs	r4, #1
   d573a:	f300 80ab 	bgt.w	d5894 <__aeabi_dmul+0x238>
   d573e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5742:	bfde      	ittt	le
   d5744:	2000      	movle	r0, #0
   d5746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d574a:	bd70      	pople	{r4, r5, r6, pc}
   d574c:	f1c4 0400 	rsb	r4, r4, #0
   d5750:	3c20      	subs	r4, #32
   d5752:	da35      	bge.n	d57c0 <__aeabi_dmul+0x164>
   d5754:	340c      	adds	r4, #12
   d5756:	dc1b      	bgt.n	d5790 <__aeabi_dmul+0x134>
   d5758:	f104 0414 	add.w	r4, r4, #20
   d575c:	f1c4 0520 	rsb	r5, r4, #32
   d5760:	fa00 f305 	lsl.w	r3, r0, r5
   d5764:	fa20 f004 	lsr.w	r0, r0, r4
   d5768:	fa01 f205 	lsl.w	r2, r1, r5
   d576c:	ea40 0002 	orr.w	r0, r0, r2
   d5770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d577c:	fa21 f604 	lsr.w	r6, r1, r4
   d5780:	eb42 0106 	adc.w	r1, r2, r6
   d5784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5788:	bf08      	it	eq
   d578a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d578e:	bd70      	pop	{r4, r5, r6, pc}
   d5790:	f1c4 040c 	rsb	r4, r4, #12
   d5794:	f1c4 0520 	rsb	r5, r4, #32
   d5798:	fa00 f304 	lsl.w	r3, r0, r4
   d579c:	fa20 f005 	lsr.w	r0, r0, r5
   d57a0:	fa01 f204 	lsl.w	r2, r1, r4
   d57a4:	ea40 0002 	orr.w	r0, r0, r2
   d57a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d57ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d57b0:	f141 0100 	adc.w	r1, r1, #0
   d57b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d57b8:	bf08      	it	eq
   d57ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d57be:	bd70      	pop	{r4, r5, r6, pc}
   d57c0:	f1c4 0520 	rsb	r5, r4, #32
   d57c4:	fa00 f205 	lsl.w	r2, r0, r5
   d57c8:	ea4e 0e02 	orr.w	lr, lr, r2
   d57cc:	fa20 f304 	lsr.w	r3, r0, r4
   d57d0:	fa01 f205 	lsl.w	r2, r1, r5
   d57d4:	ea43 0302 	orr.w	r3, r3, r2
   d57d8:	fa21 f004 	lsr.w	r0, r1, r4
   d57dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d57e0:	fa21 f204 	lsr.w	r2, r1, r4
   d57e4:	ea20 0002 	bic.w	r0, r0, r2
   d57e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d57ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d57f0:	bf08      	it	eq
   d57f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d57f6:	bd70      	pop	{r4, r5, r6, pc}
   d57f8:	f094 0f00 	teq	r4, #0
   d57fc:	d10f      	bne.n	d581e <__aeabi_dmul+0x1c2>
   d57fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5802:	0040      	lsls	r0, r0, #1
   d5804:	eb41 0101 	adc.w	r1, r1, r1
   d5808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d580c:	bf08      	it	eq
   d580e:	3c01      	subeq	r4, #1
   d5810:	d0f7      	beq.n	d5802 <__aeabi_dmul+0x1a6>
   d5812:	ea41 0106 	orr.w	r1, r1, r6
   d5816:	f095 0f00 	teq	r5, #0
   d581a:	bf18      	it	ne
   d581c:	4770      	bxne	lr
   d581e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5822:	0052      	lsls	r2, r2, #1
   d5824:	eb43 0303 	adc.w	r3, r3, r3
   d5828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d582c:	bf08      	it	eq
   d582e:	3d01      	subeq	r5, #1
   d5830:	d0f7      	beq.n	d5822 <__aeabi_dmul+0x1c6>
   d5832:	ea43 0306 	orr.w	r3, r3, r6
   d5836:	4770      	bx	lr
   d5838:	ea94 0f0c 	teq	r4, ip
   d583c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5840:	bf18      	it	ne
   d5842:	ea95 0f0c 	teqne	r5, ip
   d5846:	d00c      	beq.n	d5862 <__aeabi_dmul+0x206>
   d5848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d584c:	bf18      	it	ne
   d584e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5852:	d1d1      	bne.n	d57f8 <__aeabi_dmul+0x19c>
   d5854:	ea81 0103 	eor.w	r1, r1, r3
   d5858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d585c:	f04f 0000 	mov.w	r0, #0
   d5860:	bd70      	pop	{r4, r5, r6, pc}
   d5862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5866:	bf06      	itte	eq
   d5868:	4610      	moveq	r0, r2
   d586a:	4619      	moveq	r1, r3
   d586c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5870:	d019      	beq.n	d58a6 <__aeabi_dmul+0x24a>
   d5872:	ea94 0f0c 	teq	r4, ip
   d5876:	d102      	bne.n	d587e <__aeabi_dmul+0x222>
   d5878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d587c:	d113      	bne.n	d58a6 <__aeabi_dmul+0x24a>
   d587e:	ea95 0f0c 	teq	r5, ip
   d5882:	d105      	bne.n	d5890 <__aeabi_dmul+0x234>
   d5884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5888:	bf1c      	itt	ne
   d588a:	4610      	movne	r0, r2
   d588c:	4619      	movne	r1, r3
   d588e:	d10a      	bne.n	d58a6 <__aeabi_dmul+0x24a>
   d5890:	ea81 0103 	eor.w	r1, r1, r3
   d5894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d589c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d58a0:	f04f 0000 	mov.w	r0, #0
   d58a4:	bd70      	pop	{r4, r5, r6, pc}
   d58a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d58aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d58ae:	bd70      	pop	{r4, r5, r6, pc}

000d58b0 <__aeabi_ddiv>:
   d58b0:	b570      	push	{r4, r5, r6, lr}
   d58b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d58b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d58ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d58be:	bf1d      	ittte	ne
   d58c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d58c4:	ea94 0f0c 	teqne	r4, ip
   d58c8:	ea95 0f0c 	teqne	r5, ip
   d58cc:	f000 f8a7 	bleq	d5a1e <__aeabi_ddiv+0x16e>
   d58d0:	eba4 0405 	sub.w	r4, r4, r5
   d58d4:	ea81 0e03 	eor.w	lr, r1, r3
   d58d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d58dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d58e0:	f000 8088 	beq.w	d59f4 <__aeabi_ddiv+0x144>
   d58e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d58e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d58ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d58f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d58f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d58f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d58fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5900:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5908:	429d      	cmp	r5, r3
   d590a:	bf08      	it	eq
   d590c:	4296      	cmpeq	r6, r2
   d590e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5912:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5916:	d202      	bcs.n	d591e <__aeabi_ddiv+0x6e>
   d5918:	085b      	lsrs	r3, r3, #1
   d591a:	ea4f 0232 	mov.w	r2, r2, rrx
   d591e:	1ab6      	subs	r6, r6, r2
   d5920:	eb65 0503 	sbc.w	r5, r5, r3
   d5924:	085b      	lsrs	r3, r3, #1
   d5926:	ea4f 0232 	mov.w	r2, r2, rrx
   d592a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d592e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5932:	ebb6 0e02 	subs.w	lr, r6, r2
   d5936:	eb75 0e03 	sbcs.w	lr, r5, r3
   d593a:	bf22      	ittt	cs
   d593c:	1ab6      	subcs	r6, r6, r2
   d593e:	4675      	movcs	r5, lr
   d5940:	ea40 000c 	orrcs.w	r0, r0, ip
   d5944:	085b      	lsrs	r3, r3, #1
   d5946:	ea4f 0232 	mov.w	r2, r2, rrx
   d594a:	ebb6 0e02 	subs.w	lr, r6, r2
   d594e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5952:	bf22      	ittt	cs
   d5954:	1ab6      	subcs	r6, r6, r2
   d5956:	4675      	movcs	r5, lr
   d5958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d595c:	085b      	lsrs	r3, r3, #1
   d595e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5962:	ebb6 0e02 	subs.w	lr, r6, r2
   d5966:	eb75 0e03 	sbcs.w	lr, r5, r3
   d596a:	bf22      	ittt	cs
   d596c:	1ab6      	subcs	r6, r6, r2
   d596e:	4675      	movcs	r5, lr
   d5970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5974:	085b      	lsrs	r3, r3, #1
   d5976:	ea4f 0232 	mov.w	r2, r2, rrx
   d597a:	ebb6 0e02 	subs.w	lr, r6, r2
   d597e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5982:	bf22      	ittt	cs
   d5984:	1ab6      	subcs	r6, r6, r2
   d5986:	4675      	movcs	r5, lr
   d5988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d598c:	ea55 0e06 	orrs.w	lr, r5, r6
   d5990:	d018      	beq.n	d59c4 <__aeabi_ddiv+0x114>
   d5992:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d599a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d599e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d59a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d59a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d59aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d59ae:	d1c0      	bne.n	d5932 <__aeabi_ddiv+0x82>
   d59b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d59b4:	d10b      	bne.n	d59ce <__aeabi_ddiv+0x11e>
   d59b6:	ea41 0100 	orr.w	r1, r1, r0
   d59ba:	f04f 0000 	mov.w	r0, #0
   d59be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d59c2:	e7b6      	b.n	d5932 <__aeabi_ddiv+0x82>
   d59c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d59c8:	bf04      	itt	eq
   d59ca:	4301      	orreq	r1, r0
   d59cc:	2000      	moveq	r0, #0
   d59ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d59d2:	bf88      	it	hi
   d59d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d59d8:	f63f aeaf 	bhi.w	d573a <__aeabi_dmul+0xde>
   d59dc:	ebb5 0c03 	subs.w	ip, r5, r3
   d59e0:	bf04      	itt	eq
   d59e2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d59e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d59ea:	f150 0000 	adcs.w	r0, r0, #0
   d59ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d59f2:	bd70      	pop	{r4, r5, r6, pc}
   d59f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d59f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d59fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5a00:	bfc2      	ittt	gt
   d5a02:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5a0a:	bd70      	popgt	{r4, r5, r6, pc}
   d5a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5a10:	f04f 0e00 	mov.w	lr, #0
   d5a14:	3c01      	subs	r4, #1
   d5a16:	e690      	b.n	d573a <__aeabi_dmul+0xde>
   d5a18:	ea45 0e06 	orr.w	lr, r5, r6
   d5a1c:	e68d      	b.n	d573a <__aeabi_dmul+0xde>
   d5a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5a22:	ea94 0f0c 	teq	r4, ip
   d5a26:	bf08      	it	eq
   d5a28:	ea95 0f0c 	teqeq	r5, ip
   d5a2c:	f43f af3b 	beq.w	d58a6 <__aeabi_dmul+0x24a>
   d5a30:	ea94 0f0c 	teq	r4, ip
   d5a34:	d10a      	bne.n	d5a4c <__aeabi_ddiv+0x19c>
   d5a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a3a:	f47f af34 	bne.w	d58a6 <__aeabi_dmul+0x24a>
   d5a3e:	ea95 0f0c 	teq	r5, ip
   d5a42:	f47f af25 	bne.w	d5890 <__aeabi_dmul+0x234>
   d5a46:	4610      	mov	r0, r2
   d5a48:	4619      	mov	r1, r3
   d5a4a:	e72c      	b.n	d58a6 <__aeabi_dmul+0x24a>
   d5a4c:	ea95 0f0c 	teq	r5, ip
   d5a50:	d106      	bne.n	d5a60 <__aeabi_ddiv+0x1b0>
   d5a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5a56:	f43f aefd 	beq.w	d5854 <__aeabi_dmul+0x1f8>
   d5a5a:	4610      	mov	r0, r2
   d5a5c:	4619      	mov	r1, r3
   d5a5e:	e722      	b.n	d58a6 <__aeabi_dmul+0x24a>
   d5a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5a64:	bf18      	it	ne
   d5a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5a6a:	f47f aec5 	bne.w	d57f8 <__aeabi_dmul+0x19c>
   d5a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5a72:	f47f af0d 	bne.w	d5890 <__aeabi_dmul+0x234>
   d5a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5a7a:	f47f aeeb 	bne.w	d5854 <__aeabi_dmul+0x1f8>
   d5a7e:	e712      	b.n	d58a6 <__aeabi_dmul+0x24a>

000d5a80 <__gedf2>:
   d5a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d5a84:	e006      	b.n	d5a94 <__cmpdf2+0x4>
   d5a86:	bf00      	nop

000d5a88 <__ledf2>:
   d5a88:	f04f 0c01 	mov.w	ip, #1
   d5a8c:	e002      	b.n	d5a94 <__cmpdf2+0x4>
   d5a8e:	bf00      	nop

000d5a90 <__cmpdf2>:
   d5a90:	f04f 0c01 	mov.w	ip, #1
   d5a94:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5aa4:	bf18      	it	ne
   d5aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5aaa:	d01b      	beq.n	d5ae4 <__cmpdf2+0x54>
   d5aac:	b001      	add	sp, #4
   d5aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5ab2:	bf0c      	ite	eq
   d5ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5ab8:	ea91 0f03 	teqne	r1, r3
   d5abc:	bf02      	ittt	eq
   d5abe:	ea90 0f02 	teqeq	r0, r2
   d5ac2:	2000      	moveq	r0, #0
   d5ac4:	4770      	bxeq	lr
   d5ac6:	f110 0f00 	cmn.w	r0, #0
   d5aca:	ea91 0f03 	teq	r1, r3
   d5ace:	bf58      	it	pl
   d5ad0:	4299      	cmppl	r1, r3
   d5ad2:	bf08      	it	eq
   d5ad4:	4290      	cmpeq	r0, r2
   d5ad6:	bf2c      	ite	cs
   d5ad8:	17d8      	asrcs	r0, r3, #31
   d5ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5ade:	f040 0001 	orr.w	r0, r0, #1
   d5ae2:	4770      	bx	lr
   d5ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5aec:	d102      	bne.n	d5af4 <__cmpdf2+0x64>
   d5aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5af2:	d107      	bne.n	d5b04 <__cmpdf2+0x74>
   d5af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5afc:	d1d6      	bne.n	d5aac <__cmpdf2+0x1c>
   d5afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5b02:	d0d3      	beq.n	d5aac <__cmpdf2+0x1c>
   d5b04:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5b08:	4770      	bx	lr
   d5b0a:	bf00      	nop

000d5b0c <__aeabi_cdrcmple>:
   d5b0c:	4684      	mov	ip, r0
   d5b0e:	4610      	mov	r0, r2
   d5b10:	4662      	mov	r2, ip
   d5b12:	468c      	mov	ip, r1
   d5b14:	4619      	mov	r1, r3
   d5b16:	4663      	mov	r3, ip
   d5b18:	e000      	b.n	d5b1c <__aeabi_cdcmpeq>
   d5b1a:	bf00      	nop

000d5b1c <__aeabi_cdcmpeq>:
   d5b1c:	b501      	push	{r0, lr}
   d5b1e:	f7ff ffb7 	bl	d5a90 <__cmpdf2>
   d5b22:	2800      	cmp	r0, #0
   d5b24:	bf48      	it	mi
   d5b26:	f110 0f00 	cmnmi.w	r0, #0
   d5b2a:	bd01      	pop	{r0, pc}

000d5b2c <__aeabi_dcmpeq>:
   d5b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5b30:	f7ff fff4 	bl	d5b1c <__aeabi_cdcmpeq>
   d5b34:	bf0c      	ite	eq
   d5b36:	2001      	moveq	r0, #1
   d5b38:	2000      	movne	r0, #0
   d5b3a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5b3e:	bf00      	nop

000d5b40 <__aeabi_dcmplt>:
   d5b40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5b44:	f7ff ffea 	bl	d5b1c <__aeabi_cdcmpeq>
   d5b48:	bf34      	ite	cc
   d5b4a:	2001      	movcc	r0, #1
   d5b4c:	2000      	movcs	r0, #0
   d5b4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d5b52:	bf00      	nop

000d5b54 <__aeabi_dcmple>:
   d5b54:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5b58:	f7ff ffe0 	bl	d5b1c <__aeabi_cdcmpeq>
   d5b5c:	bf94      	ite	ls
   d5b5e:	2001      	movls	r0, #1
   d5b60:	2000      	movhi	r0, #0
   d5b62:	f85d fb08 	ldr.w	pc, [sp], #8
   d5b66:	bf00      	nop

000d5b68 <__aeabi_dcmpge>:
   d5b68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5b6c:	f7ff ffce 	bl	d5b0c <__aeabi_cdrcmple>
   d5b70:	bf94      	ite	ls
   d5b72:	2001      	movls	r0, #1
   d5b74:	2000      	movhi	r0, #0
   d5b76:	f85d fb08 	ldr.w	pc, [sp], #8
   d5b7a:	bf00      	nop

000d5b7c <__aeabi_dcmpgt>:
   d5b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5b80:	f7ff ffc4 	bl	d5b0c <__aeabi_cdrcmple>
   d5b84:	bf34      	ite	cc
   d5b86:	2001      	movcc	r0, #1
   d5b88:	2000      	movcs	r0, #0
   d5b8a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5b8e:	bf00      	nop

000d5b90 <__aeabi_dcmpun>:
   d5b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5b98:	d102      	bne.n	d5ba0 <__aeabi_dcmpun+0x10>
   d5b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5b9e:	d10a      	bne.n	d5bb6 <__aeabi_dcmpun+0x26>
   d5ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ba8:	d102      	bne.n	d5bb0 <__aeabi_dcmpun+0x20>
   d5baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5bae:	d102      	bne.n	d5bb6 <__aeabi_dcmpun+0x26>
   d5bb0:	f04f 0000 	mov.w	r0, #0
   d5bb4:	4770      	bx	lr
   d5bb6:	f04f 0001 	mov.w	r0, #1
   d5bba:	4770      	bx	lr

000d5bbc <__aeabi_d2iz>:
   d5bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5bc4:	d215      	bcs.n	d5bf2 <__aeabi_d2iz+0x36>
   d5bc6:	d511      	bpl.n	d5bec <__aeabi_d2iz+0x30>
   d5bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5bd0:	d912      	bls.n	d5bf8 <__aeabi_d2iz+0x3c>
   d5bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5be2:	fa23 f002 	lsr.w	r0, r3, r2
   d5be6:	bf18      	it	ne
   d5be8:	4240      	negne	r0, r0
   d5bea:	4770      	bx	lr
   d5bec:	f04f 0000 	mov.w	r0, #0
   d5bf0:	4770      	bx	lr
   d5bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5bf6:	d105      	bne.n	d5c04 <__aeabi_d2iz+0x48>
   d5bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5bfc:	bf08      	it	eq
   d5bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5c02:	4770      	bx	lr
   d5c04:	f04f 0000 	mov.w	r0, #0
   d5c08:	4770      	bx	lr
   d5c0a:	bf00      	nop

000d5c0c <__aeabi_d2uiz>:
   d5c0c:	004a      	lsls	r2, r1, #1
   d5c0e:	d211      	bcs.n	d5c34 <__aeabi_d2uiz+0x28>
   d5c10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5c14:	d211      	bcs.n	d5c3a <__aeabi_d2uiz+0x2e>
   d5c16:	d50d      	bpl.n	d5c34 <__aeabi_d2uiz+0x28>
   d5c18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5c1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5c20:	d40e      	bmi.n	d5c40 <__aeabi_d2uiz+0x34>
   d5c22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5c2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5c2e:	fa23 f002 	lsr.w	r0, r3, r2
   d5c32:	4770      	bx	lr
   d5c34:	f04f 0000 	mov.w	r0, #0
   d5c38:	4770      	bx	lr
   d5c3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5c3e:	d102      	bne.n	d5c46 <__aeabi_d2uiz+0x3a>
   d5c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5c44:	4770      	bx	lr
   d5c46:	f04f 0000 	mov.w	r0, #0
   d5c4a:	4770      	bx	lr

000d5c4c <atexit>:
   d5c4c:	2300      	movs	r3, #0
   d5c4e:	4601      	mov	r1, r0
   d5c50:	461a      	mov	r2, r3
   d5c52:	4618      	mov	r0, r3
   d5c54:	f000 b842 	b.w	d5cdc <__register_exitproc>

000d5c58 <memcpy>:
   d5c58:	440a      	add	r2, r1
   d5c5a:	4291      	cmp	r1, r2
   d5c5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d5c60:	d100      	bne.n	d5c64 <memcpy+0xc>
   d5c62:	4770      	bx	lr
   d5c64:	b510      	push	{r4, lr}
   d5c66:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5c6e:	4291      	cmp	r1, r2
   d5c70:	d1f9      	bne.n	d5c66 <memcpy+0xe>
   d5c72:	bd10      	pop	{r4, pc}

000d5c74 <memset>:
   d5c74:	4402      	add	r2, r0
   d5c76:	4603      	mov	r3, r0
   d5c78:	4293      	cmp	r3, r2
   d5c7a:	d100      	bne.n	d5c7e <memset+0xa>
   d5c7c:	4770      	bx	lr
   d5c7e:	f803 1b01 	strb.w	r1, [r3], #1
   d5c82:	e7f9      	b.n	d5c78 <memset+0x4>

000d5c84 <srand>:
   d5c84:	b538      	push	{r3, r4, r5, lr}
   d5c86:	4b0d      	ldr	r3, [pc, #52]	; (d5cbc <srand+0x38>)
   d5c88:	681d      	ldr	r5, [r3, #0]
   d5c8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5c8c:	4604      	mov	r4, r0
   d5c8e:	b97b      	cbnz	r3, d5cb0 <srand+0x2c>
   d5c90:	2018      	movs	r0, #24
   d5c92:	f7fe fd59 	bl	d4748 <malloc>
   d5c96:	4a0a      	ldr	r2, [pc, #40]	; (d5cc0 <srand+0x3c>)
   d5c98:	4b0a      	ldr	r3, [pc, #40]	; (d5cc4 <srand+0x40>)
   d5c9a:	63a8      	str	r0, [r5, #56]	; 0x38
   d5c9c:	e9c0 2300 	strd	r2, r3, [r0]
   d5ca0:	4b09      	ldr	r3, [pc, #36]	; (d5cc8 <srand+0x44>)
   d5ca2:	6083      	str	r3, [r0, #8]
   d5ca4:	230b      	movs	r3, #11
   d5ca6:	8183      	strh	r3, [r0, #12]
   d5ca8:	2201      	movs	r2, #1
   d5caa:	2300      	movs	r3, #0
   d5cac:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5cb0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5cb2:	2200      	movs	r2, #0
   d5cb4:	611c      	str	r4, [r3, #16]
   d5cb6:	615a      	str	r2, [r3, #20]
   d5cb8:	bd38      	pop	{r3, r4, r5, pc}
   d5cba:	bf00      	nop
   d5cbc:	2003e4f8 	.word	0x2003e4f8
   d5cc0:	abcd330e 	.word	0xabcd330e
   d5cc4:	e66d1234 	.word	0xe66d1234
   d5cc8:	0005deec 	.word	0x0005deec

000d5ccc <strlen>:
   d5ccc:	4603      	mov	r3, r0
   d5cce:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5cd2:	2a00      	cmp	r2, #0
   d5cd4:	d1fb      	bne.n	d5cce <strlen+0x2>
   d5cd6:	1a18      	subs	r0, r3, r0
   d5cd8:	3801      	subs	r0, #1
   d5cda:	4770      	bx	lr

000d5cdc <__register_exitproc>:
   d5cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5ce0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d5d9c <__register_exitproc+0xc0>
   d5ce4:	4606      	mov	r6, r0
   d5ce6:	f8d8 0000 	ldr.w	r0, [r8]
   d5cea:	461f      	mov	r7, r3
   d5cec:	460d      	mov	r5, r1
   d5cee:	4691      	mov	r9, r2
   d5cf0:	f000 f856 	bl	d5da0 <__retarget_lock_acquire_recursive>
   d5cf4:	4b25      	ldr	r3, [pc, #148]	; (d5d8c <__register_exitproc+0xb0>)
   d5cf6:	681c      	ldr	r4, [r3, #0]
   d5cf8:	b934      	cbnz	r4, d5d08 <__register_exitproc+0x2c>
   d5cfa:	4c25      	ldr	r4, [pc, #148]	; (d5d90 <__register_exitproc+0xb4>)
   d5cfc:	601c      	str	r4, [r3, #0]
   d5cfe:	4b25      	ldr	r3, [pc, #148]	; (d5d94 <__register_exitproc+0xb8>)
   d5d00:	b113      	cbz	r3, d5d08 <__register_exitproc+0x2c>
   d5d02:	681b      	ldr	r3, [r3, #0]
   d5d04:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d5d08:	6863      	ldr	r3, [r4, #4]
   d5d0a:	2b1f      	cmp	r3, #31
   d5d0c:	dd07      	ble.n	d5d1e <__register_exitproc+0x42>
   d5d0e:	f8d8 0000 	ldr.w	r0, [r8]
   d5d12:	f000 f847 	bl	d5da4 <__retarget_lock_release_recursive>
   d5d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5d1e:	b34e      	cbz	r6, d5d74 <__register_exitproc+0x98>
   d5d20:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d5d24:	b988      	cbnz	r0, d5d4a <__register_exitproc+0x6e>
   d5d26:	4b1c      	ldr	r3, [pc, #112]	; (d5d98 <__register_exitproc+0xbc>)
   d5d28:	b923      	cbnz	r3, d5d34 <__register_exitproc+0x58>
   d5d2a:	f8d8 0000 	ldr.w	r0, [r8]
   d5d2e:	f000 f838 	bl	d5da2 <__retarget_lock_release>
   d5d32:	e7f0      	b.n	d5d16 <__register_exitproc+0x3a>
   d5d34:	f44f 7084 	mov.w	r0, #264	; 0x108
   d5d38:	f7fe fd06 	bl	d4748 <malloc>
   d5d3c:	2800      	cmp	r0, #0
   d5d3e:	d0f4      	beq.n	d5d2a <__register_exitproc+0x4e>
   d5d40:	2300      	movs	r3, #0
   d5d42:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d5d46:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d5d4a:	6863      	ldr	r3, [r4, #4]
   d5d4c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d5d50:	2201      	movs	r2, #1
   d5d52:	409a      	lsls	r2, r3
   d5d54:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d5d58:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d5d5c:	4313      	orrs	r3, r2
   d5d5e:	2e02      	cmp	r6, #2
   d5d60:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d5d64:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d5d68:	bf02      	ittt	eq
   d5d6a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d5d6e:	431a      	orreq	r2, r3
   d5d70:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d5d74:	6863      	ldr	r3, [r4, #4]
   d5d76:	f8d8 0000 	ldr.w	r0, [r8]
   d5d7a:	1c5a      	adds	r2, r3, #1
   d5d7c:	3302      	adds	r3, #2
   d5d7e:	6062      	str	r2, [r4, #4]
   d5d80:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5d84:	f000 f80e 	bl	d5da4 <__retarget_lock_release_recursive>
   d5d88:	2000      	movs	r0, #0
   d5d8a:	e7c6      	b.n	d5d1a <__register_exitproc+0x3e>
   d5d8c:	2003e7e0 	.word	0x2003e7e0
   d5d90:	2003e754 	.word	0x2003e754
   d5d94:	00000000 	.word	0x00000000
   d5d98:	000d4749 	.word	0x000d4749
   d5d9c:	2003e55c 	.word	0x2003e55c

000d5da0 <__retarget_lock_acquire_recursive>:
   d5da0:	4770      	bx	lr

000d5da2 <__retarget_lock_release>:
   d5da2:	4770      	bx	lr

000d5da4 <__retarget_lock_release_recursive>:
   d5da4:	4770      	bx	lr

000d5da6 <link_code_end>:
	...

000d5da8 <dynalib_user>:
   d5da8:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5db8:	0000 0000                                   ....

000d5dbc <_ZTV3SDM>:
	...
   d5dc4:	40ab 000d 40ad 000d 6325 315b 303b 0048     .@...@..%c[1;0H.
   d5dd4:	6f56 746c 6761 3a65 2020 0020 0056 7543     Voltage:   .V.Cu
   d5de4:	7272 6e65 3a74 2020 0020 0041 6f50 6577     rrent:   .A.Powe
   d5df4:	3a72 2020 2020 0020 0057 7246 7165 6575     r:     .W.Freque
   d5e04:	636e 3a79 0020 7a48 0000 0000               ncy: .Hz....

000d5e10 <_ZTVN5spark13CellularClassE>:
	...
   d5e18:	47ff 000d 47f5 000d 47eb 000d 47a1 000d     .G...G...G...G..
   d5e28:	47df 000d 47d3 000d 4a65 000d 4a6d 000d     .G...G..eJ..mJ..
   d5e38:	47c7 000d 47bf 000d 47b5 000d 47ab 000d     .G...G...G...G..
   d5e48:	4a9d 000d                                   .J..

000d5e4c <_ZTVN5spark13EthernetClassE>:
	...
   d5e54:	4897 000d 488d 000d 4883 000d 4879 000d     .H...H...H..yH..
   d5e64:	486d 000d 4861 000d 4a65 000d 4a6d 000d     mH..aH..eJ..mJ..
   d5e74:	4855 000d 484d 000d 4843 000d 4839 000d     UH..MH..CH..9H..
   d5e84:	4a9d 000d                                   .J..

000d5e88 <_ZTV7TwoWire>:
	...
   d5e90:	48b5 000d 48ff 000d 48d7 000d 48b7 000d     .H...H...H...H..
   d5ea0:	48df 000d 48e7 000d 48ef 000d 48f7 000d     .H...H...H...H..

000d5eb0 <_ZTV9IPAddress>:
	...
   d5eb8:	4941 000d 4931 000d 4933 000d 7061 0070     AI..1I..3I..app.

000d5ec8 <_ZTVN5spark12NetworkClassE>:
	...
   d5ed0:	4a25 000d 4a2f 000d 4a39 000d 4a43 000d     %J../J..9J..CJ..
   d5ee0:	4a4d 000d 4a59 000d 4a65 000d 4a6d 000d     MJ..YJ..eJ..mJ..
   d5ef0:	4a75 000d 4a81 000d 4a89 000d 4a93 000d     uJ...J...J...J..
   d5f00:	4a9d 000d 616e 006e 6e69 0066 766f 0066     .J..nan.inf.ovf.
   d5f10:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   d5f20:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d5f30 <_ZTV11USARTSerial>:
	...
   d5f38:	4e55 000d 4ec3 000d 4e9b 000d 4b85 000d     UN...N...N...K..
   d5f48:	4e6b 000d 4e87 000d 4e79 000d 4e95 000d     kN...N..yN...N..
   d5f58:	4e57 000d 4e5d 000d                         WN..]N..

000d5f60 <_ZTV9USBSerial>:
	...
   d5f68:	4f57 000d 4fbf 000d 4f95 000d 4b85 000d     WO...O...O...K..
   d5f78:	4f87 000d 4f59 000d 4f69 000d 4fb9 000d     .O..YO..iO...O..
   d5f88:	4f79 000d 4f51 000d                         yO..QO..

000d5f90 <_ZSt7nothrow>:
	...

000d5f91 <link_const_variable_data_end>:
   d5f91:	00          	.byte	0x00
	...

000d5f94 <link_constructors_location>:
   d5f94:	000d43ed 	.word	0x000d43ed
   d5f98:	000d4791 	.word	0x000d4791
   d5f9c:	000d4809 	.word	0x000d4809
   d5fa0:	000d48a1 	.word	0x000d48a1
   d5fa4:	000d4a15 	.word	0x000d4a15
   d5fa8:	000d4b71 	.word	0x000d4b71
   d5fac:	000d4dfd 	.word	0x000d4dfd
   d5fb0:	000d4e1d 	.word	0x000d4e1d
   d5fb4:	000d4e41 	.word	0x000d4e41

000d5fb8 <link_constructors_end>:
	...
